{"ast":null,"code":"export const handleMoveMonster = (state, dispatch, monsterName, key, showDialog) => {\n  const moveDistance = 40; // Match tileSize or element size\n  const monster = state.monsters.find(m => m.name === monsterName);\n  if (!monster) return;\n  const newPosition = {\n    ...monster.position\n  };\n  switch (key) {\n    case 'ArrowUp':\n      newPosition.y = Math.max(0, newPosition.y - moveDistance);\n      break;\n    case 'ArrowDown':\n      newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n      break;\n    case 'ArrowLeft':\n      newPosition.x = Math.max(0, newPosition.x - moveDistance);\n      break;\n    case 'ArrowRight':\n      newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'MOVE_MONSTER',\n    payload: {\n      name: monsterName,\n      position: newPosition\n    }\n  });\n\n  // Update DOM element position for the monster (class .monster)\n  const monsterElement = document.querySelector(`.monster[data-name=\"${monsterName}\"]`);\n  if (monsterElement) {\n    monsterElement.style.left = `${newPosition.x}px`;\n    monsterElement.style.top = `${newPosition.y}px`;\n    monsterElement.style.transform = 'none';\n  }\n  showDialog(`Monster ${monsterName} moved ${key.toLowerCase().replace('arrow', '')}`);\n};\nexport const handleMoveGreatPower = (state, dispatch, powerName, key, showDialog) => {\n  const moveDistance = 40; // Match tileSize or element size\n  const power = state.greatPowers.find(p => p.name === powerName);\n  if (!power) return;\n  const newPosition = {\n    ...power.position\n  };\n  switch (key) {\n    case 'ArrowUp':\n      newPosition.y = Math.max(0, newPosition.y - moveDistance);\n      break;\n    case 'ArrowDown':\n      newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n      break;\n    case 'ArrowLeft':\n      newPosition.x = Math.max(0, newPosition.x - moveDistance);\n      break;\n    case 'ArrowRight':\n      newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'MOVE_GREAT_POWER',\n    payload: {\n      name: powerName,\n      position: newPosition\n    }\n  });\n\n  // Update DOM element position for the great power (e.g., #watcher)\n  const powerElement = document.querySelector(`#watcher`); // Adjust selector based on your HTML\n  if (powerElement) {\n    powerElement.style.left = `${newPosition.x}px`;\n    powerElement.style.top = `${newPosition.y}px`;\n    powerElement.style.transform = 'none';\n  }\n  showDialog(`Great Power ${powerName} moved ${key.toLowerCase().replace('arrow', '')}`);\n};\nexport const handleMoveRedoubt = (state, dispatch, key, showDialog) => {\n  const moveDistance = 40; // Match tileSize or element size\n  const newPosition = {\n    ...state.redoubt.position\n  };\n  switch (key) {\n    case 'ArrowUp':\n      newPosition.y = Math.max(0, newPosition.y - moveDistance);\n      break;\n    case 'ArrowDown':\n      newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n      break;\n    case 'ArrowLeft':\n      newPosition.x = Math.max(0, newPosition.x - moveDistance);\n      break;\n    case 'ArrowRight':\n      newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'MOVE_REDOUBT',\n    payload: {\n      position: newPosition\n    }\n  });\n\n  // Update DOM element position for redoubt\n  const redoubt = document.querySelector('#redoubt');\n  if (redoubt) {\n    console.log('Updating redoubt DOM position to:', newPosition);\n    redoubt.style.left = `${newPosition.x}px`;\n    redoubt.style.top = `${newPosition.y}px`;\n    redoubt.style.transform = 'none';\n    redoubt.style.visibility = 'visible';\n    redoubt.style.opacity = '1';\n  }\n  showDialog(`Redoubt moved ${key.toLowerCase().replace('arrow', '')}`);\n};\nexport const handleCombatStep = (state, dispatch, showDialog) => {\n  console.log('Combat step executed');\n  // Add combat logic here if needed (e.g., update HP, turn order, etc.)\n  showDialog('Combat step taken');\n};","map":{"version":3,"names":["handleMoveMonster","state","dispatch","monsterName","key","showDialog","moveDistance","monster","monsters","find","m","name","newPosition","position","y","Math","max","min","x","type","payload","monsterElement","document","querySelector","style","left","top","transform","toLowerCase","replace","handleMoveGreatPower","powerName","power","greatPowers","p","powerElement","handleMoveRedoubt","redoubt","console","log","visibility","opacity","handleCombatStep"],"sources":["/mnt/devplex/Nightland/nightland/src/modules/gameLoop.js"],"sourcesContent":["\n\nexport const handleMoveMonster = (state, dispatch, monsterName, key, showDialog) => {\n    const moveDistance = 40; // Match tileSize or element size\n    const monster = state.monsters.find(m => m.name === monsterName);\n    if (!monster) return;\n\n    const newPosition = { ...monster.position };\n\n    switch (key) {\n        case 'ArrowUp':\n            newPosition.y = Math.max(0, newPosition.y - moveDistance);\n            break;\n        case 'ArrowDown':\n            newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n            break;\n        case 'ArrowLeft':\n            newPosition.x = Math.max(0, newPosition.x - moveDistance);\n            break;\n        case 'ArrowRight':\n            newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n            break;\n        default:\n            return;\n    }\n\n    dispatch({ type: 'MOVE_MONSTER', payload: { name: monsterName, position: newPosition } });\n\n    // Update DOM element position for the monster (class .monster)\n    const monsterElement = document.querySelector(`.monster[data-name=\"${monsterName}\"]`);\n    if (monsterElement) {\n        monsterElement.style.left = `${newPosition.x}px`;\n        monsterElement.style.top = `${newPosition.y}px`;\n        monsterElement.style.transform = 'none';\n    }\n\n    showDialog(`Monster ${monsterName} moved ${key.toLowerCase().replace('arrow', '')}`);\n};\n\nexport const handleMoveGreatPower = (state, dispatch, powerName, key, showDialog) => {\n    const moveDistance = 40; // Match tileSize or element size\n    const power = state.greatPowers.find(p => p.name === powerName);\n    if (!power) return;\n\n    const newPosition = { ...power.position };\n\n    switch (key) {\n        case 'ArrowUp':\n            newPosition.y = Math.max(0, newPosition.y - moveDistance);\n            break;\n        case 'ArrowDown':\n            newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n            break;\n        case 'ArrowLeft':\n            newPosition.x = Math.max(0, newPosition.x - moveDistance);\n            break;\n        case 'ArrowRight':\n            newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n            break;\n        default:\n            return;\n    }\n\n    dispatch({ type: 'MOVE_GREAT_POWER', payload: { name: powerName, position: newPosition } });\n\n    // Update DOM element position for the great power (e.g., #watcher)\n    const powerElement = document.querySelector(`#watcher`); // Adjust selector based on your HTML\n    if (powerElement) {\n        powerElement.style.left = `${newPosition.x}px`;\n        powerElement.style.top = `${newPosition.y}px`;\n        powerElement.style.transform = 'none';\n    }\n\n    showDialog(`Great Power ${powerName} moved ${key.toLowerCase().replace('arrow', '')}`);\n};\n\nexport const handleMoveRedoubt = (state, dispatch, key, showDialog) => {\n    const moveDistance = 40; // Match tileSize or element size\n    const newPosition = { ...state.redoubt.position };\n\n    switch (key) {\n        case 'ArrowUp':\n            newPosition.y = Math.max(0, newPosition.y - moveDistance);\n            break;\n        case 'ArrowDown':\n            newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n            break;\n        case 'ArrowLeft':\n            newPosition.x = Math.max(0, newPosition.x - moveDistance);\n            break;\n        case 'ArrowRight':\n            newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n            break;\n        default:\n            return;\n    }\n\n    dispatch({ type: 'MOVE_REDOUBT', payload: { position: newPosition } });\n\n    // Update DOM element position for redoubt\n    const redoubt = document.querySelector('#redoubt');\n    if (redoubt) {\n        console.log('Updating redoubt DOM position to:', newPosition);\n        redoubt.style.left = `${newPosition.x}px`;\n        redoubt.style.top = `${newPosition.y}px`;\n        redoubt.style.transform = 'none';\n        redoubt.style.visibility = 'visible';\n        redoubt.style.opacity = '1';\n    }\n\n    showDialog(`Redoubt moved ${key.toLowerCase().replace('arrow', '')}`);\n};\n\nexport const handleCombatStep = (state, dispatch, showDialog) => {\n    console.log('Combat step executed');\n    // Add combat logic here if needed (e.g., update HP, turn order, etc.)\n    showDialog('Combat step taken');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}