{"ast":null,"code":"// nightland/src/modules/gameLoop.js\n// nightland/src/modules/gameLoop.js (partial update for handleMovePlayer)\nexport const handleMovePlayer = (state, dispatch, key, showDialog) => {\n  const moveDistance = 40; // Match tileSize or element size (40px as in your styles)\n  const newPosition = {\n    ...state.player.position\n  };\n  switch (key) {\n    case 'ArrowUp':\n      newPosition.y = Math.max(0, newPosition.y - moveDistance); // Prevent going off top (y >= 0)\n      break;\n    case 'ArrowDown':\n      newPosition.y = Math.min(1960, newPosition.y + moveDistance); // Prevent going off bottom (y <= 1960)\n      break;\n    case 'ArrowLeft':\n      newPosition.x = Math.max(0, newPosition.x - moveDistance); // Prevent going off left (x >= 0)\n      break;\n    case 'ArrowRight':\n      newPosition.x = Math.min(1960, newPosition.x + moveDistance); // Prevent going off right (x <= 1960)\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'MOVE_PLAYER',\n    payload: {\n      position: newPosition\n    }\n  });\n\n  // Update DOM element position for player\n  const player = document.querySelector('#player');\n  if (player) {\n    console.log('Updating player DOM position to:', newPosition);\n    player.style.left = `${newPosition.x}px`;\n    player.style.top = `${newPosition.y}px`;\n    player.style.transform = 'none'; // Remove transform for absolute positioning\n    player.style.visibility = 'visible'; // Ensure visible\n    player.style.opacity = '1'; // Ensure fully opaque\n\n    // No direct transform here; rely on App.js useEffect to handle scrolling\n  }\n  showDialog(`Player moved ${key.toLowerCase().replace('arrow', '')}`);\n};\nexport const handleMoveMonster = (state, dispatch, monsterName, key, showDialog) => {\n  const moveDistance = 40; // Match tileSize or element size\n  const monster = state.monsters.find(m => m.name === monsterName);\n  if (!monster) return;\n  const newPosition = {\n    ...monster.position\n  };\n  switch (key) {\n    case 'ArrowUp':\n      newPosition.y = Math.max(0, newPosition.y - moveDistance);\n      break;\n    case 'ArrowDown':\n      newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n      break;\n    case 'ArrowLeft':\n      newPosition.x = Math.max(0, newPosition.x - moveDistance);\n      break;\n    case 'ArrowRight':\n      newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'MOVE_MONSTER',\n    payload: {\n      name: monsterName,\n      position: newPosition\n    }\n  });\n\n  // Update DOM element position for the monster (class .monster)\n  const monsterElement = document.querySelector(`.monster[data-name=\"${monsterName}\"]`);\n  if (monsterElement) {\n    monsterElement.style.left = `${newPosition.x}px`;\n    monsterElement.style.top = `${newPosition.y}px`;\n    monsterElement.style.transform = 'none';\n  }\n  showDialog(`Monster ${monsterName} moved ${key.toLowerCase().replace('arrow', '')}`);\n};\nexport const handleMoveGreatPower = (state, dispatch, powerName, key, showDialog) => {\n  const moveDistance = 40; // Match tileSize or element size\n  const power = state.greatPowers.find(p => p.name === powerName);\n  if (!power) return;\n  const newPosition = {\n    ...power.position\n  };\n  switch (key) {\n    case 'ArrowUp':\n      newPosition.y = Math.max(0, newPosition.y - moveDistance);\n      break;\n    case 'ArrowDown':\n      newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n      break;\n    case 'ArrowLeft':\n      newPosition.x = Math.max(0, newPosition.x - moveDistance);\n      break;\n    case 'ArrowRight':\n      newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'MOVE_GREAT_POWER',\n    payload: {\n      name: powerName,\n      position: newPosition\n    }\n  });\n\n  // Update DOM element position for the great power (e.g., #watcher)\n  const powerElement = document.querySelector(`#watcher`); // Adjust selector based on your HTML\n  if (powerElement) {\n    powerElement.style.left = `${newPosition.x}px`;\n    powerElement.style.top = `${newPosition.y}px`;\n    powerElement.style.transform = 'none';\n  }\n  showDialog(`Great Power ${powerName} moved ${key.toLowerCase().replace('arrow', '')}`);\n};\nexport const handleMoveRedoubt = (state, dispatch, key, showDialog) => {\n  const moveDistance = 40; // Match tileSize or element size\n  const newPosition = {\n    ...state.redoubt.position\n  };\n  switch (key) {\n    case 'ArrowUp':\n      newPosition.y = Math.max(0, newPosition.y - moveDistance);\n      break;\n    case 'ArrowDown':\n      newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n      break;\n    case 'ArrowLeft':\n      newPosition.x = Math.max(0, newPosition.x - moveDistance);\n      break;\n    case 'ArrowRight':\n      newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'MOVE_REDOUBT',\n    payload: {\n      position: newPosition\n    }\n  });\n\n  // Update DOM element position for redoubt\n  const redoubt = document.querySelector('#redoubt');\n  if (redoubt) {\n    console.log('Updating redoubt DOM position to:', newPosition);\n    redoubt.style.left = `${newPosition.x}px`;\n    redoubt.style.top = `${newPosition.y}px`;\n    redoubt.style.transform = 'none';\n    redoubt.style.visibility = 'visible';\n    redoubt.style.opacity = '1';\n  }\n  showDialog(`Redoubt moved ${key.toLowerCase().replace('arrow', '')}`);\n};\nexport const handleCombatStep = (state, dispatch, showDialog) => {\n  console.log('Combat step executed');\n  // Add combat logic here if needed (e.g., update HP, turn order, etc.)\n  showDialog('Combat step taken');\n};","map":{"version":3,"names":["handleMovePlayer","state","dispatch","key","showDialog","moveDistance","newPosition","player","position","y","Math","max","min","x","type","payload","document","querySelector","console","log","style","left","top","transform","visibility","opacity","toLowerCase","replace","handleMoveMonster","monsterName","monster","monsters","find","m","name","monsterElement","handleMoveGreatPower","powerName","power","greatPowers","p","powerElement","handleMoveRedoubt","redoubt","handleCombatStep"],"sources":["/mnt/devplex/Nightland/nightland/src/modules/gameLoop.js"],"sourcesContent":["// nightland/src/modules/gameLoop.js\n// nightland/src/modules/gameLoop.js (partial update for handleMovePlayer)\nexport const handleMovePlayer = (state, dispatch, key, showDialog) => {\n    const moveDistance = 40; // Match tileSize or element size (40px as in your styles)\n    const newPosition = { ...state.player.position };\n\n    switch (key) {\n        case 'ArrowUp':\n            newPosition.y = Math.max(0, newPosition.y - moveDistance); // Prevent going off top (y >= 0)\n            break;\n        case 'ArrowDown':\n            newPosition.y = Math.min(1960, newPosition.y + moveDistance); // Prevent going off bottom (y <= 1960)\n            break;\n        case 'ArrowLeft':\n            newPosition.x = Math.max(0, newPosition.x - moveDistance); // Prevent going off left (x >= 0)\n            break;\n        case 'ArrowRight':\n            newPosition.x = Math.min(1960, newPosition.x + moveDistance); // Prevent going off right (x <= 1960)\n            break;\n        default:\n            return;\n    }\n\n    dispatch({ type: 'MOVE_PLAYER', payload: { position: newPosition } });\n\n    // Update DOM element position for player\n    const player = document.querySelector('#player');\n    if (player) {\n        console.log('Updating player DOM position to:', newPosition);\n        player.style.left = `${newPosition.x}px`;\n        player.style.top = `${newPosition.y}px`;\n        player.style.transform = 'none'; // Remove transform for absolute positioning\n        player.style.visibility = 'visible'; // Ensure visible\n        player.style.opacity = '1'; // Ensure fully opaque\n\n        // No direct transform here; rely on App.js useEffect to handle scrolling\n    }\n\n    showDialog(`Player moved ${key.toLowerCase().replace('arrow', '')}`);\n};\n\nexport const handleMoveMonster = (state, dispatch, monsterName, key, showDialog) => {\n    const moveDistance = 40; // Match tileSize or element size\n    const monster = state.monsters.find(m => m.name === monsterName);\n    if (!monster) return;\n\n    const newPosition = { ...monster.position };\n\n    switch (key) {\n        case 'ArrowUp':\n            newPosition.y = Math.max(0, newPosition.y - moveDistance);\n            break;\n        case 'ArrowDown':\n            newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n            break;\n        case 'ArrowLeft':\n            newPosition.x = Math.max(0, newPosition.x - moveDistance);\n            break;\n        case 'ArrowRight':\n            newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n            break;\n        default:\n            return;\n    }\n\n    dispatch({ type: 'MOVE_MONSTER', payload: { name: monsterName, position: newPosition } });\n\n    // Update DOM element position for the monster (class .monster)\n    const monsterElement = document.querySelector(`.monster[data-name=\"${monsterName}\"]`);\n    if (monsterElement) {\n        monsterElement.style.left = `${newPosition.x}px`;\n        monsterElement.style.top = `${newPosition.y}px`;\n        monsterElement.style.transform = 'none';\n    }\n\n    showDialog(`Monster ${monsterName} moved ${key.toLowerCase().replace('arrow', '')}`);\n};\n\nexport const handleMoveGreatPower = (state, dispatch, powerName, key, showDialog) => {\n    const moveDistance = 40; // Match tileSize or element size\n    const power = state.greatPowers.find(p => p.name === powerName);\n    if (!power) return;\n\n    const newPosition = { ...power.position };\n\n    switch (key) {\n        case 'ArrowUp':\n            newPosition.y = Math.max(0, newPosition.y - moveDistance);\n            break;\n        case 'ArrowDown':\n            newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n            break;\n        case 'ArrowLeft':\n            newPosition.x = Math.max(0, newPosition.x - moveDistance);\n            break;\n        case 'ArrowRight':\n            newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n            break;\n        default:\n            return;\n    }\n\n    dispatch({ type: 'MOVE_GREAT_POWER', payload: { name: powerName, position: newPosition } });\n\n    // Update DOM element position for the great power (e.g., #watcher)\n    const powerElement = document.querySelector(`#watcher`); // Adjust selector based on your HTML\n    if (powerElement) {\n        powerElement.style.left = `${newPosition.x}px`;\n        powerElement.style.top = `${newPosition.y}px`;\n        powerElement.style.transform = 'none';\n    }\n\n    showDialog(`Great Power ${powerName} moved ${key.toLowerCase().replace('arrow', '')}`);\n};\n\nexport const handleMoveRedoubt = (state, dispatch, key, showDialog) => {\n    const moveDistance = 40; // Match tileSize or element size\n    const newPosition = { ...state.redoubt.position };\n\n    switch (key) {\n        case 'ArrowUp':\n            newPosition.y = Math.max(0, newPosition.y - moveDistance);\n            break;\n        case 'ArrowDown':\n            newPosition.y = Math.min(15960, newPosition.y + moveDistance);\n            break;\n        case 'ArrowLeft':\n            newPosition.x = Math.max(0, newPosition.x - moveDistance);\n            break;\n        case 'ArrowRight':\n            newPosition.x = Math.min(15960, newPosition.x + moveDistance);\n            break;\n        default:\n            return;\n    }\n\n    dispatch({ type: 'MOVE_REDOUBT', payload: { position: newPosition } });\n\n    // Update DOM element position for redoubt\n    const redoubt = document.querySelector('#redoubt');\n    if (redoubt) {\n        console.log('Updating redoubt DOM position to:', newPosition);\n        redoubt.style.left = `${newPosition.x}px`;\n        redoubt.style.top = `${newPosition.y}px`;\n        redoubt.style.transform = 'none';\n        redoubt.style.visibility = 'visible';\n        redoubt.style.opacity = '1';\n    }\n\n    showDialog(`Redoubt moved ${key.toLowerCase().replace('arrow', '')}`);\n};\n\nexport const handleCombatStep = (state, dispatch, showDialog) => {\n    console.log('Combat step executed');\n    // Add combat logic here if needed (e.g., update HP, turn order, etc.)\n    showDialog('Combat step taken');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}