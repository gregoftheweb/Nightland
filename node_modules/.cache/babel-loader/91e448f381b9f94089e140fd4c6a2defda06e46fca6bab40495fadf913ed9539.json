{"ast":null,"code":"// nightland/src/modules/gameLoop.js\nimport { updateCombatDialogs } from './utils';\nexport function handleTestDamage(state, dispatch) {\n  dispatch({\n    type: 'UPDATE_PLAYER_HP',\n    payload: {\n      hp: state.player.hp - 10\n    }\n  });\n}\nexport function handleStartCombat(state, dispatch) {\n  console.log('Start Combat Clicked - Active Monsters:', state.activeMonsters);\n  const attackers = state.activeMonsters.slice(0, state.maxAttackers).map((monster, i) => ({\n    monster,\n    position: {\n      x: state.player.x + (i % 2 ? 1 : -1),\n      y: state.player.y + (i < 2 ? -1 : 1)\n    }\n  }));\n  console.log('Attackers:', attackers);\n  const dialogData = updateCombatDialogs('I do not fear you evil!', attackers.map(() => 'grrrrr'), state.player, attackers.map(slot => slot.monster));\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: true,\n      attackSlots: attackers,\n      turnOrder: [state.player, ...attackers.map(slot => slot.monster)],\n      combatTurn: state.player,\n      dialogData: dialogData\n    }\n  });\n}\nexport function handleMovePlayer(state, dispatch, key) {\n  let {\n    x,\n    y\n  } = state.player;\n  const gridWidth = 100;\n  const gridHeight = 200;\n  switch (key) {\n    case 'ArrowUp':\n      if (y < gridHeight - 1) y++; // Up increases y, top is 199\n      break;\n    case 'ArrowDown':\n      if (y > 0) y--; // Down decreases y, bottom is 0\n      break;\n    case 'ArrowLeft':\n      if (x > 0) x--; // Left decreases x\n      break;\n    case 'ArrowRight':\n      if (x < gridWidth - 1) x++; // Right increases x\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'UPDATE_PLAYER_POSITION',\n    payload: {\n      x,\n      y\n    }\n  });\n}","map":{"version":3,"names":["updateCombatDialogs","handleTestDamage","state","dispatch","type","payload","hp","player","handleStartCombat","console","log","activeMonsters","attackers","slice","maxAttackers","map","monster","i","position","x","y","dialogData","slot","inCombat","attackSlots","turnOrder","combatTurn","handleMovePlayer","key","gridWidth","gridHeight"],"sources":["/mnt/devplex/Nightland/nightland/src/modules/gameLoop.js"],"sourcesContent":["// nightland/src/modules/gameLoop.js\nimport { updateCombatDialogs } from './utils';\n\nexport function handleTestDamage(state, dispatch) {\n    dispatch({ type: 'UPDATE_PLAYER_HP', payload: { hp: state.player.hp - 10 } });\n}\n\nexport function handleStartCombat(state, dispatch) {\n    console.log('Start Combat Clicked - Active Monsters:', state.activeMonsters);\n    const attackers = state.activeMonsters.slice(0, state.maxAttackers).map((monster, i) => ({\n        monster,\n        position: { x: state.player.x + (i % 2 ? 1 : -1), y: state.player.y + (i < 2 ? -1 : 1) }\n    }));\n    console.log('Attackers:', attackers);\n    const dialogData = updateCombatDialogs(\n        'I do not fear you evil!',\n        attackers.map(() => 'grrrrr'),\n        state.player,\n        attackers.map(slot => slot.monster)\n    );\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: true,\n            attackSlots: attackers,\n            turnOrder: [state.player, ...attackers.map(slot => slot.monster)],\n            combatTurn: state.player,\n            dialogData: dialogData\n        }\n    });\n}\n\nexport function handleMovePlayer(state, dispatch, key) {\n    let { x, y } = state.player;\n    const gridWidth = 100;\n    const gridHeight = 200;\n\n    switch (key) {\n        case 'ArrowUp':\n            if (y < gridHeight - 1) y++; // Up increases y, top is 199\n            break;\n        case 'ArrowDown':\n            if (y > 0) y--; // Down decreases y, bottom is 0\n            break;\n        case 'ArrowLeft':\n            if (x > 0) x--; // Left decreases x\n            break;\n        case 'ArrowRight':\n            if (x < gridWidth - 1) x++; // Right increases x\n            break;\n        default:\n            return;\n    }\n\n    dispatch({\n        type: 'UPDATE_PLAYER_POSITION',\n        payload: { x, y }\n    });\n}"],"mappings":"AAAA;AACA,SAASA,mBAAmB,QAAQ,SAAS;AAE7C,OAAO,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC9CA,QAAQ,CAAC;IAAEC,IAAI,EAAE,kBAAkB;IAAEC,OAAO,EAAE;MAAEC,EAAE,EAAEJ,KAAK,CAACK,MAAM,CAACD,EAAE,GAAG;IAAG;EAAE,CAAC,CAAC;AACjF;AAEA,OAAO,SAASE,iBAAiBA,CAACN,KAAK,EAAEC,QAAQ,EAAE;EAC/CM,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAER,KAAK,CAACS,cAAc,CAAC;EAC5E,MAAMC,SAAS,GAAGV,KAAK,CAACS,cAAc,CAACE,KAAK,CAAC,CAAC,EAAEX,KAAK,CAACY,YAAY,CAAC,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,MAAM;IACrFD,OAAO;IACPE,QAAQ,EAAE;MAAEC,CAAC,EAAEjB,KAAK,CAACK,MAAM,CAACY,CAAC,IAAIF,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAAEG,CAAC,EAAElB,KAAK,CAACK,MAAM,CAACa,CAAC,IAAIH,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAAE;EAC3F,CAAC,CAAC,CAAC;EACHR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,SAAS,CAAC;EACpC,MAAMS,UAAU,GAAGrB,mBAAmB,CAClC,yBAAyB,EACzBY,SAAS,CAACG,GAAG,CAAC,MAAM,QAAQ,CAAC,EAC7Bb,KAAK,CAACK,MAAM,EACZK,SAAS,CAACG,GAAG,CAACO,IAAI,IAAIA,IAAI,CAACN,OAAO,CACtC,CAAC;EACDb,QAAQ,CAAC;IACLC,IAAI,EAAE,YAAY;IAClBC,OAAO,EAAE;MACLkB,QAAQ,EAAE,IAAI;MACdC,WAAW,EAAEZ,SAAS;MACtBa,SAAS,EAAE,CAACvB,KAAK,CAACK,MAAM,EAAE,GAAGK,SAAS,CAACG,GAAG,CAACO,IAAI,IAAIA,IAAI,CAACN,OAAO,CAAC,CAAC;MACjEU,UAAU,EAAExB,KAAK,CAACK,MAAM;MACxBc,UAAU,EAAEA;IAChB;EACJ,CAAC,CAAC;AACN;AAEA,OAAO,SAASM,gBAAgBA,CAACzB,KAAK,EAAEC,QAAQ,EAAEyB,GAAG,EAAE;EACnD,IAAI;IAAET,CAAC;IAAEC;EAAE,CAAC,GAAGlB,KAAK,CAACK,MAAM;EAC3B,MAAMsB,SAAS,GAAG,GAAG;EACrB,MAAMC,UAAU,GAAG,GAAG;EAEtB,QAAQF,GAAG;IACP,KAAK,SAAS;MACV,IAAIR,CAAC,GAAGU,UAAU,GAAG,CAAC,EAAEV,CAAC,EAAE,CAAC,CAAC;MAC7B;IACJ,KAAK,WAAW;MACZ,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,CAAC,CAAC;MAChB;IACJ,KAAK,WAAW;MACZ,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,CAAC,CAAC;MAChB;IACJ,KAAK,YAAY;MACb,IAAIA,CAAC,GAAGU,SAAS,GAAG,CAAC,EAAEV,CAAC,EAAE,CAAC,CAAC;MAC5B;IACJ;MACI;EACR;EAEAhB,QAAQ,CAAC;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,OAAO,EAAE;MAAEc,CAAC;MAAEC;IAAE;EACpB,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}