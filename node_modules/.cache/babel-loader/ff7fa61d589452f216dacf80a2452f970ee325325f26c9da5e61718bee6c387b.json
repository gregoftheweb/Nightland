{"ast":null,"code":"// nightland/src/modules/gameLoop.js\nimport { updateCombatDialogs } from './utils';\nimport * as text from '../assets/copy/textcontent.js'; // Import textcontent\n\nexport function handleTestDamage(state, dispatch) {\n  dispatch({\n    type: 'UPDATE_PLAYER_HP',\n    payload: {\n      hp: state.player.hp - 10\n    }\n  });\n}\nexport function handleStartCombat(state, dispatch) {\n  console.log('Start Combat Clicked - Active Monsters:', state.activeMonsters);\n  const attackers = state.activeMonsters.slice(0, state.maxAttackers).map((monster, i) => ({\n    monster,\n    position: {\n      x: state.player.x + (i % 2 ? 1 : -1),\n      y: state.player.y + (i < 2 ? -1 : 1)\n    }\n  }));\n  console.log('Attackers:', attackers);\n  const dialogData = updateCombatDialogs(text.combatStartPlayerComment, attackers.map(() => text.combatStartEnemyComment), state.player, attackers.map(slot => slot.monster));\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: true,\n      attackSlots: attackers,\n      turnOrder: [state.player, ...attackers.map(slot => slot.monster)],\n      combatTurn: state.player,\n      dialogData: dialogData\n    }\n  });\n}\nexport function handleMovePlayer(state, dispatch, key, showDialog) {\n  let {\n    x,\n    y\n  } = state.player;\n  const gridWidth = 100;\n  const gridHeight = 200;\n  switch (key) {\n    case 'ArrowUp':\n      if (y < gridHeight - 1) y++;\n      break;\n    case 'ArrowDown':\n      if (y > 0) y--;\n      break;\n    case 'ArrowLeft':\n      if (x > 0) x--;\n      break;\n    case 'ArrowRight':\n      if (x < gridWidth - 1) x++;\n      break;\n    default:\n      return;\n    // Added default case\n  }\n  const playerMoved = x !== state.player.x || y !== state.player.y;\n  if (playerMoved) {\n    dispatch({\n      type: 'UPDATE_PLAYER_POSITION',\n      payload: {\n        x,\n        y\n      }\n    });\n    checkEncounters(state, dispatch, showDialog);\n  }\n}\nfunction checkEncounters(state, dispatch, showDialog) {\n  var _state$greatPowers$, _state$greatPowers$2;\n  const playerPixelX = state.player.x * 40; // tileSize 40px from gameState.js\n  const playerPixelY = state.player.y * 40;\n  const activeMonsters = state.activeMonsters.filter(m => m.active && m.hp > 0);\n\n  // Check Watcher encounter (simplified)\n  if (Math.abs(playerPixelX - (((_state$greatPowers$ = state.greatPowers[0]) === null || _state$greatPowers$ === void 0 ? void 0 : _state$greatPowers$.x) || 0) * 40) < 160 &&\n  // Watcher's width in pixels\n  Math.abs(playerPixelY - (((_state$greatPowers$2 = state.greatPowers[0]) === null || _state$greatPowers$2 === void 0 ? void 0 : _state$greatPowers$2.y) || 0) * 40) < 160) {\n    // Height\n    showDialog(text.watcherDeathMessage, 10000);\n    setTimeout(() => {\n      dispatch({\n        type: 'UPDATE_PLAYER_HP',\n        payload: {\n          hp: 100\n        } // Reset HP\n      });\n      dispatch({\n        type: 'UPDATE_PLAYER_POSITION',\n        payload: {\n          x: state.redoubt.x,\n          y: state.redoubt.y\n        }\n      });\n      showDialog(text.deathReviveMessage, 3600);\n    }, 10800);\n    return;\n  }\n\n  // Check Abhuman encounter\n  for (const monster of activeMonsters) {\n    if (Math.abs(playerPixelX - monster.x * 40) <= 40 &&\n    // tileSize\n    Math.abs(playerPixelY - monster.y * 40) <= 40 && !state.inCombat) {\n      handleCombatStart(state, dispatch, showDialog);\n      break;\n    }\n  }\n\n  // Spawn monsters periodically (simplified from original)\n  if ((state.moveCount || 0) % (state.spawnThreshold || 7) === 0) {\n    spawnMonsterNearPlayer(state, dispatch);\n    updateMoveCount(state, dispatch, 0);\n    updateSpawnThreshold(state, dispatch, Math.floor(Math.random() * 7) + 4);\n  } else {\n    updateMoveCount(state, dispatch, (state.moveCount || 0) + 1);\n  }\n}\nfunction handleCombatStart(state, dispatch, showDialog) {\n  const attackers = state.activeMonsters.slice(0, state.maxAttackers).map((monster, i) => ({\n    monster,\n    position: {\n      x: state.player.x + (i % 2 ? 1 : -1),\n      y: state.player.y + (i < 2 ? -1 : 1)\n    }\n  }));\n  const dialogData = updateCombatDialogs(text.combatStartPlayerComment, attackers.map(() => text.combatStartEnemyComment), state.player, attackers.map(slot => slot.monster));\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: true,\n      attackSlots: attackers,\n      turnOrder: [state.player, ...attackers.map(slot => slot.monster)],\n      combatTurn: state.player,\n      dialogData: dialogData\n    }\n  });\n}\nexport function handleCombatStep(state, dispatch, showDialog) {\n  if (!state.inCombat || !state.turnOrder.length) return;\n  const current = state.combatTurn;\n  const currentIndex = state.turnOrder.indexOf(current);\n  const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n  let allMonsters = state.attackSlots.map(slot => slot.monster);\n  console.log('Combat Step - Current:', current === null || current === void 0 ? void 0 : current.name, 'Turn Order:', state.turnOrder.map(t => t.name), 'Active Monsters:', activeMonsters.map(m => `${m.name} HP:${m.hp}`));\n  let playerComment = \"\";\n  let enemyComments = allMonsters.map(() => \"\");\n  let updatedPlayer = {\n    ...state.player\n  };\n  let updatedAttackSlots = [...state.attackSlots];\n  if (current.name === state.player.name) {\n    const target = activeMonsters[0];\n    if (target) {\n      if (Math.random() < 0.8) {\n        target.hp -= 6;\n        playerComment = text.combatPlayerHitComment;\n        enemyComments[0] = target.hp <= 0 ? text.combatVictoryEnemyComment : \"\";\n      } else {\n        playerComment = text.combatPlayerMissComment;\n      }\n    }\n  } else if (activeMonsters.includes(current)) {\n    const monsterIndex = allMonsters.indexOf(current);\n    if (Math.random() < 0.5) {\n      updatedPlayer.hp -= 4;\n      enemyComments[monsterIndex] = text.combatEnemyHitComment;\n      allMonsters[monsterIndex].lastComment = text.combatEnemyHitComment;\n    } else {\n      enemyComments[monsterIndex] = text.combatEnemyMissComment;\n      allMonsters[monsterIndex].lastComment = text.combatEnemyMissComment;\n    }\n  }\n  const dialogData = updateCombatDialogs(playerComment, enemyComments, updatedPlayer, allMonsters);\n  const nextTurnIndex = (currentIndex + 1) % state.turnOrder.length;\n  const nextTurn = state.turnOrder[nextTurnIndex];\n  if (updatedPlayer.hp <= 0) {\n    endCombat(state, dispatch, showDialog);\n  } else if (activeMonsters.length === 0) {\n    endCombat(state, dispatch, showDialog);\n  } else {\n    if (current === state.turnOrder[state.turnOrder.length - 1]) {\n      resolveRound(state, dispatch);\n      updatedAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n      calculateTurnOrder(state, dispatch);\n      roundNumber++; // Track rounds, but not used yet\n    }\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: true,\n        attackSlots: updatedAttackSlots,\n        turnOrder: state.turnOrder,\n        combatTurn: nextTurn,\n        player: {\n          ...updatedPlayer,\n          lastComment: playerComment\n        },\n        dialogData: dialogData\n      }\n    });\n    console.log('After Dispatch - inCombat:', state.inCombat, 'Next Turn:', nextTurn === null || nextTurn === void 0 ? void 0 : nextTurn.name);\n  }\n}\nfunction calculateTurnOrder(state, dispatch) {\n  const combatants = [state.player, ...state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0)];\n  const newTurnOrder = combatants.filter(c => c.hp > 0);\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: state.inCombat,\n      attackSlots: state.attackSlots,\n      turnOrder: newTurnOrder,\n      combatTurn: newTurnOrder[0],\n      player: state.player,\n      dialogData: state.dialogData\n    }\n  });\n}\nfunction resolveRound(state, dispatch) {\n  const deadMonsters = state.attackSlots.filter(slot => slot.monster && slot.monster.hp <= 0);\n  if (deadMonsters.length > 0) {\n    deadMonsters.forEach(slot => {\n      slot.monster.active = false;\n      if (state.waitingMonsters.length > 0) {\n        const nextMonster = state.waitingMonsters.shift();\n        nextMonster.x = slot.position.x;\n        nextMonster.y = slot.position.y;\n        slot.monster = nextMonster;\n      } else {\n        slot.monster = null;\n      }\n    });\n    const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: true,\n        attackSlots: newAttackSlots,\n        dialogData: state.dialogData\n      }\n    });\n  }\n}\nfunction endCombat(state, dispatch, showDialog) {\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: false,\n      attackSlots: [],\n      waitingMonsters: [],\n      turnOrder: [],\n      combatTurn: null,\n      player: {\n        ...state.player,\n        lastComment: \"\"\n      },\n      dialogData: updateCombatDialogs(\"\", [], state.player, [])\n    }\n  });\n  showDialog(text.combatVictoryPlayerComment, 3600);\n}\nfunction spawnMonsterNearPlayer(state, dispatch) {\n  const monsterTemplate = state.monsters.find(m => m.name === 'Abhuman');\n  const spawnDistance = Math.ceil(Math.random() * 3) + 1;\n  const direction = Math.floor(Math.random() * 4);\n  const newMonster = {\n    ...monsterTemplate,\n    active: true\n  };\n  switch (direction) {\n    case 0:\n      // Up\n      newMonster.x = state.player.x;\n      newMonster.y = Math.max(0, state.player.y - spawnDistance);\n      break;\n    case 1:\n      // Down\n      newMonster.x = state.player.x;\n      newMonster.y = Math.min(199, state.player.y + spawnDistance);\n      break;\n    case 2:\n      // Left\n      newMonster.x = Math.max(0, state.player.x - spawnDistance);\n      newMonster.y = state.player.y;\n      break;\n    case 3:\n      // Right\n      newMonster.x = Math.min(99, state.player.x + spawnDistance);\n      newMonster.y = state.player.y;\n      break;\n  }\n  dispatch({\n    type: 'ADD_ACTIVE_MONSTER',\n    payload: {\n      monster: newMonster\n    }\n  });\n}","map":{"version":3,"names":["updateCombatDialogs","text","handleTestDamage","state","dispatch","type","payload","hp","player","handleStartCombat","console","log","activeMonsters","attackers","slice","maxAttackers","map","monster","i","position","x","y","dialogData","combatStartPlayerComment","combatStartEnemyComment","slot","inCombat","attackSlots","turnOrder","combatTurn","handleMovePlayer","key","showDialog","gridWidth","gridHeight","playerMoved","checkEncounters","_state$greatPowers$","_state$greatPowers$2","playerPixelX","playerPixelY","filter","m","active","Math","abs","greatPowers","watcherDeathMessage","setTimeout","redoubt","deathReviveMessage","handleCombatStart","moveCount","spawnThreshold","spawnMonsterNearPlayer","updateMoveCount","updateSpawnThreshold","floor","random","handleCombatStep","length","current","currentIndex","indexOf","allMonsters","name","t","playerComment","enemyComments","updatedPlayer","updatedAttackSlots","target","combatPlayerHitComment","combatVictoryEnemyComment","combatPlayerMissComment","includes","monsterIndex","combatEnemyHitComment","lastComment","combatEnemyMissComment","nextTurnIndex","nextTurn","endCombat","resolveRound","s","calculateTurnOrder","roundNumber","combatants","newTurnOrder","c","deadMonsters","forEach","waitingMonsters","nextMonster","shift","newAttackSlots","combatVictoryPlayerComment","monsterTemplate","monsters","find","spawnDistance","ceil","direction","newMonster","max","min"],"sources":["/mnt/devplex/Nightland/nightland/src/modules/gameLoop.js"],"sourcesContent":["// nightland/src/modules/gameLoop.js\nimport { updateCombatDialogs } from './utils';\nimport * as text from '../assets/copy/textcontent.js'; // Import textcontent\n\nexport function handleTestDamage(state, dispatch) {\n    dispatch({ type: 'UPDATE_PLAYER_HP', payload: { hp: state.player.hp - 10 } });\n}\n\nexport function handleStartCombat(state, dispatch) {\n    console.log('Start Combat Clicked - Active Monsters:', state.activeMonsters);\n    const attackers = state.activeMonsters.slice(0, state.maxAttackers).map((monster, i) => ({\n        monster,\n        position: { x: state.player.x + (i % 2 ? 1 : -1), y: state.player.y + (i < 2 ? -1 : 1) }\n    }));\n    console.log('Attackers:', attackers);\n    const dialogData = updateCombatDialogs(\n        text.combatStartPlayerComment,\n        attackers.map(() => text.combatStartEnemyComment),\n        state.player,\n        attackers.map(slot => slot.monster)\n    );\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: true,\n            attackSlots: attackers,\n            turnOrder: [state.player, ...attackers.map(slot => slot.monster)],\n            combatTurn: state.player,\n            dialogData: dialogData\n        }\n    });\n}\n\nexport function handleMovePlayer(state, dispatch, key, showDialog) {\n    let { x, y } = state.player;\n    const gridWidth = 100;\n    const gridHeight = 200;\n\n    switch (key) {\n        case 'ArrowUp':\n            if (y < gridHeight - 1) y++;\n            break;\n        case 'ArrowDown':\n            if (y > 0) y--;\n            break;\n        case 'ArrowLeft':\n            if (x > 0) x--;\n            break;\n        case 'ArrowRight':\n            if (x < gridWidth - 1) x++;\n            break;\n        default:\n            return; // Added default case\n    }\n\n    const playerMoved = x !== state.player.x || y !== state.player.y;\n    if (playerMoved) {\n        dispatch({\n            type: 'UPDATE_PLAYER_POSITION',\n            payload: { x, y }\n        });\n        checkEncounters(state, dispatch, showDialog);\n    }\n}\n\nfunction checkEncounters(state, dispatch, showDialog) {\n    const playerPixelX = state.player.x * 40; // tileSize 40px from gameState.js\n    const playerPixelY = state.player.y * 40;\n    const activeMonsters = state.activeMonsters.filter(m => m.active && m.hp > 0);\n\n    // Check Watcher encounter (simplified)\n    if (Math.abs(playerPixelX - (state.greatPowers[0]?.x || 0) * 40) < 160 && // Watcher's width in pixels\n        Math.abs(playerPixelY - (state.greatPowers[0]?.y || 0) * 40) < 160) { // Height\n        showDialog(text.watcherDeathMessage, 10000);\n        setTimeout(() => {\n            dispatch({\n                type: 'UPDATE_PLAYER_HP',\n                payload: { hp: 100 } // Reset HP\n            });\n            dispatch({\n                type: 'UPDATE_PLAYER_POSITION',\n                payload: { x: state.redoubt.x, y: state.redoubt.y }\n            });\n            showDialog(text.deathReviveMessage, 3600);\n        }, 10800);\n        return;\n    }\n\n    // Check Abhuman encounter\n    for (const monster of activeMonsters) {\n        if (Math.abs(playerPixelX - monster.x * 40) <= 40 && // tileSize\n            Math.abs(playerPixelY - monster.y * 40) <= 40 && !state.inCombat) {\n            handleCombatStart(state, dispatch, showDialog);\n            break;\n        }\n    }\n\n    // Spawn monsters periodically (simplified from original)\n    if ((state.moveCount || 0) % (state.spawnThreshold || 7) === 0) {\n        spawnMonsterNearPlayer(state, dispatch);\n        updateMoveCount(state, dispatch, 0);\n        updateSpawnThreshold(state, dispatch, Math.floor(Math.random() * 7) + 4);\n    } else {\n        updateMoveCount(state, dispatch, (state.moveCount || 0) + 1);\n    }\n}\n\nfunction handleCombatStart(state, dispatch, showDialog) {\n    const attackers = state.activeMonsters.slice(0, state.maxAttackers).map((monster, i) => ({\n        monster,\n        position: { x: state.player.x + (i % 2 ? 1 : -1), y: state.player.y + (i < 2 ? -1 : 1) }\n    }));\n    const dialogData = updateCombatDialogs(\n        text.combatStartPlayerComment,\n        attackers.map(() => text.combatStartEnemyComment),\n        state.player,\n        attackers.map(slot => slot.monster)\n    );\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: true,\n            attackSlots: attackers,\n            turnOrder: [state.player, ...attackers.map(slot => slot.monster)],\n            combatTurn: state.player,\n            dialogData: dialogData\n        }\n    });\n}\n\nexport function handleCombatStep(state, dispatch, showDialog) {\n    if (!state.inCombat || !state.turnOrder.length) return;\n\n    const current = state.combatTurn;\n    const currentIndex = state.turnOrder.indexOf(current);\n    const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n    let allMonsters = state.attackSlots.map(slot => slot.monster);\n\n    console.log('Combat Step - Current:', current?.name, 'Turn Order:', state.turnOrder.map(t => t.name), 'Active Monsters:', activeMonsters.map(m => `${m.name} HP:${m.hp}`));\n\n    let playerComment = \"\";\n    let enemyComments = allMonsters.map(() => \"\");\n    let updatedPlayer = { ...state.player };\n    let updatedAttackSlots = [...state.attackSlots];\n\n    if (current.name === state.player.name) {\n        const target = activeMonsters[0];\n        if (target) {\n            if (Math.random() < 0.8) {\n                target.hp -= 6;\n                playerComment = text.combatPlayerHitComment;\n                enemyComments[0] = target.hp <= 0 ? text.combatVictoryEnemyComment : \"\";\n            } else {\n                playerComment = text.combatPlayerMissComment;\n            }\n        }\n    } else if (activeMonsters.includes(current)) {\n        const monsterIndex = allMonsters.indexOf(current);\n        if (Math.random() < 0.5) {\n            updatedPlayer.hp -= 4;\n            enemyComments[monsterIndex] = text.combatEnemyHitComment;\n            allMonsters[monsterIndex].lastComment = text.combatEnemyHitComment;\n        } else {\n            enemyComments[monsterIndex] = text.combatEnemyMissComment;\n            allMonsters[monsterIndex].lastComment = text.combatEnemyMissComment;\n        }\n    }\n\n    const dialogData = updateCombatDialogs(playerComment, enemyComments, updatedPlayer, allMonsters);\n\n    const nextTurnIndex = (currentIndex + 1) % state.turnOrder.length;\n    const nextTurn = state.turnOrder[nextTurnIndex];\n\n    if (updatedPlayer.hp <= 0) {\n        endCombat(state, dispatch, showDialog);\n    } else if (activeMonsters.length === 0) {\n        endCombat(state, dispatch, showDialog);\n    } else {\n        if (current === state.turnOrder[state.turnOrder.length - 1]) {\n            resolveRound(state, dispatch);\n            updatedAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n            calculateTurnOrder(state, dispatch);\n            roundNumber++; // Track rounds, but not used yet\n        }\n\n        dispatch({\n            type: 'SET_COMBAT',\n            payload: {\n                inCombat: true,\n                attackSlots: updatedAttackSlots,\n                turnOrder: state.turnOrder,\n                combatTurn: nextTurn,\n                player: { ...updatedPlayer, lastComment: playerComment },\n                dialogData: dialogData\n            }\n        });\n        console.log('After Dispatch - inCombat:', state.inCombat, 'Next Turn:', nextTurn?.name);\n    }\n}\n\nfunction calculateTurnOrder(state, dispatch) {\n    const combatants = [state.player, ...state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0)];\n    const newTurnOrder = combatants.filter(c => c.hp > 0);\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: state.inCombat,\n            attackSlots: state.attackSlots,\n            turnOrder: newTurnOrder,\n            combatTurn: newTurnOrder[0],\n            player: state.player,\n            dialogData: state.dialogData\n        }\n    });\n}\n\nfunction resolveRound(state, dispatch) {\n    const deadMonsters = state.attackSlots.filter(slot => slot.monster && slot.monster.hp <= 0);\n    if (deadMonsters.length > 0) {\n        deadMonsters.forEach(slot => {\n            slot.monster.active = false;\n            if (state.waitingMonsters.length > 0) {\n                const nextMonster = state.waitingMonsters.shift();\n                nextMonster.x = slot.position.x;\n                nextMonster.y = slot.position.y;\n                slot.monster = nextMonster;\n            } else {\n                slot.monster = null;\n            }\n        });\n        const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n        dispatch({\n            type: 'SET_COMBAT',\n            payload: {\n                inCombat: true,\n                attackSlots: newAttackSlots,\n                dialogData: state.dialogData\n            }\n        });\n    }\n}\n\nfunction endCombat(state, dispatch, showDialog) {\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: false,\n            attackSlots: [],\n            waitingMonsters: [],\n            turnOrder: [],\n            combatTurn: null,\n            player: { ...state.player, lastComment: \"\" },\n            dialogData: updateCombatDialogs(\"\", [], state.player, [])\n        }\n    });\n    showDialog(text.combatVictoryPlayerComment, 3600);\n}\n\nfunction spawnMonsterNearPlayer(state, dispatch) {\n    const monsterTemplate = state.monsters.find(m => m.name === 'Abhuman');\n    const spawnDistance = Math.ceil(Math.random() * 3) + 1;\n    const direction = Math.floor(Math.random() * 4);\n    const newMonster = { ...monsterTemplate, active: true };\n    switch (direction) {\n        case 0: // Up\n            newMonster.x = state.player.x;\n            newMonster.y = Math.max(0, state.player.y - spawnDistance);\n            break;\n        case 1: // Down\n            newMonster.x = state.player.x;\n            newMonster.y = Math.min(199, state.player.y + spawnDistance);\n            break;\n        case 2: // Left\n            newMonster.x = Math.max(0, state.player.x - spawnDistance);\n            newMonster.y = state.player.y;\n            break;\n        case 3: // Right\n            newMonster.x = Math.min(99, state.player.x + spawnDistance);\n            newMonster.y = state.player.y;\n            break;\n    }\n    dispatch({\n        type: 'ADD_ACTIVE_MONSTER',\n        payload: { monster: newMonster }\n    });\n}"],"mappings":"AAAA;AACA,SAASA,mBAAmB,QAAQ,SAAS;AAC7C,OAAO,KAAKC,IAAI,MAAM,+BAA+B,CAAC,CAAC;;AAEvD,OAAO,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC9CA,QAAQ,CAAC;IAAEC,IAAI,EAAE,kBAAkB;IAAEC,OAAO,EAAE;MAAEC,EAAE,EAAEJ,KAAK,CAACK,MAAM,CAACD,EAAE,GAAG;IAAG;EAAE,CAAC,CAAC;AACjF;AAEA,OAAO,SAASE,iBAAiBA,CAACN,KAAK,EAAEC,QAAQ,EAAE;EAC/CM,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAER,KAAK,CAACS,cAAc,CAAC;EAC5E,MAAMC,SAAS,GAAGV,KAAK,CAACS,cAAc,CAACE,KAAK,CAAC,CAAC,EAAEX,KAAK,CAACY,YAAY,CAAC,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,MAAM;IACrFD,OAAO;IACPE,QAAQ,EAAE;MAAEC,CAAC,EAAEjB,KAAK,CAACK,MAAM,CAACY,CAAC,IAAIF,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAAEG,CAAC,EAAElB,KAAK,CAACK,MAAM,CAACa,CAAC,IAAIH,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAAE;EAC3F,CAAC,CAAC,CAAC;EACHR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,SAAS,CAAC;EACpC,MAAMS,UAAU,GAAGtB,mBAAmB,CAClCC,IAAI,CAACsB,wBAAwB,EAC7BV,SAAS,CAACG,GAAG,CAAC,MAAMf,IAAI,CAACuB,uBAAuB,CAAC,EACjDrB,KAAK,CAACK,MAAM,EACZK,SAAS,CAACG,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACR,OAAO,CACtC,CAAC;EACDb,QAAQ,CAAC;IACLC,IAAI,EAAE,YAAY;IAClBC,OAAO,EAAE;MACLoB,QAAQ,EAAE,IAAI;MACdC,WAAW,EAAEd,SAAS;MACtBe,SAAS,EAAE,CAACzB,KAAK,CAACK,MAAM,EAAE,GAAGK,SAAS,CAACG,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACR,OAAO,CAAC,CAAC;MACjEY,UAAU,EAAE1B,KAAK,CAACK,MAAM;MACxBc,UAAU,EAAEA;IAChB;EACJ,CAAC,CAAC;AACN;AAEA,OAAO,SAASQ,gBAAgBA,CAAC3B,KAAK,EAAEC,QAAQ,EAAE2B,GAAG,EAAEC,UAAU,EAAE;EAC/D,IAAI;IAAEZ,CAAC;IAAEC;EAAE,CAAC,GAAGlB,KAAK,CAACK,MAAM;EAC3B,MAAMyB,SAAS,GAAG,GAAG;EACrB,MAAMC,UAAU,GAAG,GAAG;EAEtB,QAAQH,GAAG;IACP,KAAK,SAAS;MACV,IAAIV,CAAC,GAAGa,UAAU,GAAG,CAAC,EAAEb,CAAC,EAAE;MAC3B;IACJ,KAAK,WAAW;MACZ,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE;MACd;IACJ,KAAK,WAAW;MACZ,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE;MACd;IACJ,KAAK,YAAY;MACb,IAAIA,CAAC,GAAGa,SAAS,GAAG,CAAC,EAAEb,CAAC,EAAE;MAC1B;IACJ;MACI;IAAQ;EAChB;EAEA,MAAMe,WAAW,GAAGf,CAAC,KAAKjB,KAAK,CAACK,MAAM,CAACY,CAAC,IAAIC,CAAC,KAAKlB,KAAK,CAACK,MAAM,CAACa,CAAC;EAChE,IAAIc,WAAW,EAAE;IACb/B,QAAQ,CAAC;MACLC,IAAI,EAAE,wBAAwB;MAC9BC,OAAO,EAAE;QAAEc,CAAC;QAAEC;MAAE;IACpB,CAAC,CAAC;IACFe,eAAe,CAACjC,KAAK,EAAEC,QAAQ,EAAE4B,UAAU,CAAC;EAChD;AACJ;AAEA,SAASI,eAAeA,CAACjC,KAAK,EAAEC,QAAQ,EAAE4B,UAAU,EAAE;EAAA,IAAAK,mBAAA,EAAAC,oBAAA;EAClD,MAAMC,YAAY,GAAGpC,KAAK,CAACK,MAAM,CAACY,CAAC,GAAG,EAAE,CAAC,CAAC;EAC1C,MAAMoB,YAAY,GAAGrC,KAAK,CAACK,MAAM,CAACa,CAAC,GAAG,EAAE;EACxC,MAAMT,cAAc,GAAGT,KAAK,CAACS,cAAc,CAAC6B,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,IAAID,CAAC,CAACnC,EAAE,GAAG,CAAC,CAAC;;EAE7E;EACA,IAAIqC,IAAI,CAACC,GAAG,CAACN,YAAY,GAAG,CAAC,EAAAF,mBAAA,GAAAlC,KAAK,CAAC2C,WAAW,CAAC,CAAC,CAAC,cAAAT,mBAAA,uBAApBA,mBAAA,CAAsBjB,CAAC,KAAI,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG;EAAI;EACtEwB,IAAI,CAACC,GAAG,CAACL,YAAY,GAAG,CAAC,EAAAF,oBAAA,GAAAnC,KAAK,CAAC2C,WAAW,CAAC,CAAC,CAAC,cAAAR,oBAAA,uBAApBA,oBAAA,CAAsBjB,CAAC,KAAI,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,EAAE;IAAE;IACtEW,UAAU,CAAC/B,IAAI,CAAC8C,mBAAmB,EAAE,KAAK,CAAC;IAC3CC,UAAU,CAAC,MAAM;MACb5C,QAAQ,CAAC;QACLC,IAAI,EAAE,kBAAkB;QACxBC,OAAO,EAAE;UAAEC,EAAE,EAAE;QAAI,CAAC,CAAC;MACzB,CAAC,CAAC;MACFH,QAAQ,CAAC;QACLC,IAAI,EAAE,wBAAwB;QAC9BC,OAAO,EAAE;UAAEc,CAAC,EAAEjB,KAAK,CAAC8C,OAAO,CAAC7B,CAAC;UAAEC,CAAC,EAAElB,KAAK,CAAC8C,OAAO,CAAC5B;QAAE;MACtD,CAAC,CAAC;MACFW,UAAU,CAAC/B,IAAI,CAACiD,kBAAkB,EAAE,IAAI,CAAC;IAC7C,CAAC,EAAE,KAAK,CAAC;IACT;EACJ;;EAEA;EACA,KAAK,MAAMjC,OAAO,IAAIL,cAAc,EAAE;IAClC,IAAIgC,IAAI,CAACC,GAAG,CAACN,YAAY,GAAGtB,OAAO,CAACG,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE;IAAI;IACjDwB,IAAI,CAACC,GAAG,CAACL,YAAY,GAAGvB,OAAO,CAACI,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,IAAI,CAAClB,KAAK,CAACuB,QAAQ,EAAE;MAClEyB,iBAAiB,CAAChD,KAAK,EAAEC,QAAQ,EAAE4B,UAAU,CAAC;MAC9C;IACJ;EACJ;;EAEA;EACA,IAAI,CAAC7B,KAAK,CAACiD,SAAS,IAAI,CAAC,KAAKjD,KAAK,CAACkD,cAAc,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE;IAC5DC,sBAAsB,CAACnD,KAAK,EAAEC,QAAQ,CAAC;IACvCmD,eAAe,CAACpD,KAAK,EAAEC,QAAQ,EAAE,CAAC,CAAC;IACnCoD,oBAAoB,CAACrD,KAAK,EAAEC,QAAQ,EAAEwC,IAAI,CAACa,KAAK,CAACb,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAC5E,CAAC,MAAM;IACHH,eAAe,CAACpD,KAAK,EAAEC,QAAQ,EAAE,CAACD,KAAK,CAACiD,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC;EAChE;AACJ;AAEA,SAASD,iBAAiBA,CAAChD,KAAK,EAAEC,QAAQ,EAAE4B,UAAU,EAAE;EACpD,MAAMnB,SAAS,GAAGV,KAAK,CAACS,cAAc,CAACE,KAAK,CAAC,CAAC,EAAEX,KAAK,CAACY,YAAY,CAAC,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,MAAM;IACrFD,OAAO;IACPE,QAAQ,EAAE;MAAEC,CAAC,EAAEjB,KAAK,CAACK,MAAM,CAACY,CAAC,IAAIF,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAAEG,CAAC,EAAElB,KAAK,CAACK,MAAM,CAACa,CAAC,IAAIH,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAAE;EAC3F,CAAC,CAAC,CAAC;EACH,MAAMI,UAAU,GAAGtB,mBAAmB,CAClCC,IAAI,CAACsB,wBAAwB,EAC7BV,SAAS,CAACG,GAAG,CAAC,MAAMf,IAAI,CAACuB,uBAAuB,CAAC,EACjDrB,KAAK,CAACK,MAAM,EACZK,SAAS,CAACG,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACR,OAAO,CACtC,CAAC;EACDb,QAAQ,CAAC;IACLC,IAAI,EAAE,YAAY;IAClBC,OAAO,EAAE;MACLoB,QAAQ,EAAE,IAAI;MACdC,WAAW,EAAEd,SAAS;MACtBe,SAAS,EAAE,CAACzB,KAAK,CAACK,MAAM,EAAE,GAAGK,SAAS,CAACG,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACR,OAAO,CAAC,CAAC;MACjEY,UAAU,EAAE1B,KAAK,CAACK,MAAM;MACxBc,UAAU,EAAEA;IAChB;EACJ,CAAC,CAAC;AACN;AAEA,OAAO,SAASqC,gBAAgBA,CAACxD,KAAK,EAAEC,QAAQ,EAAE4B,UAAU,EAAE;EAC1D,IAAI,CAAC7B,KAAK,CAACuB,QAAQ,IAAI,CAACvB,KAAK,CAACyB,SAAS,CAACgC,MAAM,EAAE;EAEhD,MAAMC,OAAO,GAAG1D,KAAK,CAAC0B,UAAU;EAChC,MAAMiC,YAAY,GAAG3D,KAAK,CAACyB,SAAS,CAACmC,OAAO,CAACF,OAAO,CAAC;EACrD,MAAMjD,cAAc,GAAGT,KAAK,CAACwB,WAAW,CAACX,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACR,OAAO,CAAC,CAACwB,MAAM,CAACC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACnC,EAAE,GAAG,CAAC,CAAC;EAC7F,IAAIyD,WAAW,GAAG7D,KAAK,CAACwB,WAAW,CAACX,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACR,OAAO,CAAC;EAE7DP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEkD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,IAAI,EAAE,aAAa,EAAE9D,KAAK,CAACyB,SAAS,CAACZ,GAAG,CAACkD,CAAC,IAAIA,CAAC,CAACD,IAAI,CAAC,EAAE,kBAAkB,EAAErD,cAAc,CAACI,GAAG,CAAC0B,CAAC,IAAI,GAAGA,CAAC,CAACuB,IAAI,OAAOvB,CAAC,CAACnC,EAAE,EAAE,CAAC,CAAC;EAE1K,IAAI4D,aAAa,GAAG,EAAE;EACtB,IAAIC,aAAa,GAAGJ,WAAW,CAAChD,GAAG,CAAC,MAAM,EAAE,CAAC;EAC7C,IAAIqD,aAAa,GAAG;IAAE,GAAGlE,KAAK,CAACK;EAAO,CAAC;EACvC,IAAI8D,kBAAkB,GAAG,CAAC,GAAGnE,KAAK,CAACwB,WAAW,CAAC;EAE/C,IAAIkC,OAAO,CAACI,IAAI,KAAK9D,KAAK,CAACK,MAAM,CAACyD,IAAI,EAAE;IACpC,MAAMM,MAAM,GAAG3D,cAAc,CAAC,CAAC,CAAC;IAChC,IAAI2D,MAAM,EAAE;MACR,IAAI3B,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;QACrBa,MAAM,CAAChE,EAAE,IAAI,CAAC;QACd4D,aAAa,GAAGlE,IAAI,CAACuE,sBAAsB;QAC3CJ,aAAa,CAAC,CAAC,CAAC,GAAGG,MAAM,CAAChE,EAAE,IAAI,CAAC,GAAGN,IAAI,CAACwE,yBAAyB,GAAG,EAAE;MAC3E,CAAC,MAAM;QACHN,aAAa,GAAGlE,IAAI,CAACyE,uBAAuB;MAChD;IACJ;EACJ,CAAC,MAAM,IAAI9D,cAAc,CAAC+D,QAAQ,CAACd,OAAO,CAAC,EAAE;IACzC,MAAMe,YAAY,GAAGZ,WAAW,CAACD,OAAO,CAACF,OAAO,CAAC;IACjD,IAAIjB,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;MACrBW,aAAa,CAAC9D,EAAE,IAAI,CAAC;MACrB6D,aAAa,CAACQ,YAAY,CAAC,GAAG3E,IAAI,CAAC4E,qBAAqB;MACxDb,WAAW,CAACY,YAAY,CAAC,CAACE,WAAW,GAAG7E,IAAI,CAAC4E,qBAAqB;IACtE,CAAC,MAAM;MACHT,aAAa,CAACQ,YAAY,CAAC,GAAG3E,IAAI,CAAC8E,sBAAsB;MACzDf,WAAW,CAACY,YAAY,CAAC,CAACE,WAAW,GAAG7E,IAAI,CAAC8E,sBAAsB;IACvE;EACJ;EAEA,MAAMzD,UAAU,GAAGtB,mBAAmB,CAACmE,aAAa,EAAEC,aAAa,EAAEC,aAAa,EAAEL,WAAW,CAAC;EAEhG,MAAMgB,aAAa,GAAG,CAAClB,YAAY,GAAG,CAAC,IAAI3D,KAAK,CAACyB,SAAS,CAACgC,MAAM;EACjE,MAAMqB,QAAQ,GAAG9E,KAAK,CAACyB,SAAS,CAACoD,aAAa,CAAC;EAE/C,IAAIX,aAAa,CAAC9D,EAAE,IAAI,CAAC,EAAE;IACvB2E,SAAS,CAAC/E,KAAK,EAAEC,QAAQ,EAAE4B,UAAU,CAAC;EAC1C,CAAC,MAAM,IAAIpB,cAAc,CAACgD,MAAM,KAAK,CAAC,EAAE;IACpCsB,SAAS,CAAC/E,KAAK,EAAEC,QAAQ,EAAE4B,UAAU,CAAC;EAC1C,CAAC,MAAM;IACH,IAAI6B,OAAO,KAAK1D,KAAK,CAACyB,SAAS,CAACzB,KAAK,CAACyB,SAAS,CAACgC,MAAM,GAAG,CAAC,CAAC,EAAE;MACzDuB,YAAY,CAAChF,KAAK,EAAEC,QAAQ,CAAC;MAC7BkE,kBAAkB,GAAGnE,KAAK,CAACwB,WAAW,CAACc,MAAM,CAAC2C,CAAC,IAAIA,CAAC,CAACnE,OAAO,IAAImE,CAAC,CAACnE,OAAO,CAACV,EAAE,GAAG,CAAC,CAAC;MACjF8E,kBAAkB,CAAClF,KAAK,EAAEC,QAAQ,CAAC;MACnCkF,WAAW,EAAE,CAAC,CAAC;IACnB;IAEAlF,QAAQ,CAAC;MACLC,IAAI,EAAE,YAAY;MAClBC,OAAO,EAAE;QACLoB,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE2C,kBAAkB;QAC/B1C,SAAS,EAAEzB,KAAK,CAACyB,SAAS;QAC1BC,UAAU,EAAEoD,QAAQ;QACpBzE,MAAM,EAAE;UAAE,GAAG6D,aAAa;UAAES,WAAW,EAAEX;QAAc,CAAC;QACxD7C,UAAU,EAAEA;MAChB;IACJ,CAAC,CAAC;IACFZ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAER,KAAK,CAACuB,QAAQ,EAAE,YAAY,EAAEuD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEhB,IAAI,CAAC;EAC3F;AACJ;AAEA,SAASoB,kBAAkBA,CAAClF,KAAK,EAAEC,QAAQ,EAAE;EACzC,MAAMmF,UAAU,GAAG,CAACpF,KAAK,CAACK,MAAM,EAAE,GAAGL,KAAK,CAACwB,WAAW,CAACX,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACR,OAAO,CAAC,CAACwB,MAAM,CAACC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACnC,EAAE,GAAG,CAAC,CAAC,CAAC;EAC5G,MAAMiF,YAAY,GAAGD,UAAU,CAAC9C,MAAM,CAACgD,CAAC,IAAIA,CAAC,CAAClF,EAAE,GAAG,CAAC,CAAC;EACrDH,QAAQ,CAAC;IACLC,IAAI,EAAE,YAAY;IAClBC,OAAO,EAAE;MACLoB,QAAQ,EAAEvB,KAAK,CAACuB,QAAQ;MACxBC,WAAW,EAAExB,KAAK,CAACwB,WAAW;MAC9BC,SAAS,EAAE4D,YAAY;MACvB3D,UAAU,EAAE2D,YAAY,CAAC,CAAC,CAAC;MAC3BhF,MAAM,EAAEL,KAAK,CAACK,MAAM;MACpBc,UAAU,EAAEnB,KAAK,CAACmB;IACtB;EACJ,CAAC,CAAC;AACN;AAEA,SAAS6D,YAAYA,CAAChF,KAAK,EAAEC,QAAQ,EAAE;EACnC,MAAMsF,YAAY,GAAGvF,KAAK,CAACwB,WAAW,CAACc,MAAM,CAAChB,IAAI,IAAIA,IAAI,CAACR,OAAO,IAAIQ,IAAI,CAACR,OAAO,CAACV,EAAE,IAAI,CAAC,CAAC;EAC3F,IAAImF,YAAY,CAAC9B,MAAM,GAAG,CAAC,EAAE;IACzB8B,YAAY,CAACC,OAAO,CAAClE,IAAI,IAAI;MACzBA,IAAI,CAACR,OAAO,CAAC0B,MAAM,GAAG,KAAK;MAC3B,IAAIxC,KAAK,CAACyF,eAAe,CAAChC,MAAM,GAAG,CAAC,EAAE;QAClC,MAAMiC,WAAW,GAAG1F,KAAK,CAACyF,eAAe,CAACE,KAAK,CAAC,CAAC;QACjDD,WAAW,CAACzE,CAAC,GAAGK,IAAI,CAACN,QAAQ,CAACC,CAAC;QAC/ByE,WAAW,CAACxE,CAAC,GAAGI,IAAI,CAACN,QAAQ,CAACE,CAAC;QAC/BI,IAAI,CAACR,OAAO,GAAG4E,WAAW;MAC9B,CAAC,MAAM;QACHpE,IAAI,CAACR,OAAO,GAAG,IAAI;MACvB;IACJ,CAAC,CAAC;IACF,MAAM8E,cAAc,GAAG5F,KAAK,CAACwB,WAAW,CAACc,MAAM,CAAC2C,CAAC,IAAIA,CAAC,CAACnE,OAAO,IAAImE,CAAC,CAACnE,OAAO,CAACV,EAAE,GAAG,CAAC,CAAC;IACnFH,QAAQ,CAAC;MACLC,IAAI,EAAE,YAAY;MAClBC,OAAO,EAAE;QACLoB,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAEoE,cAAc;QAC3BzE,UAAU,EAAEnB,KAAK,CAACmB;MACtB;IACJ,CAAC,CAAC;EACN;AACJ;AAEA,SAAS4D,SAASA,CAAC/E,KAAK,EAAEC,QAAQ,EAAE4B,UAAU,EAAE;EAC5C5B,QAAQ,CAAC;IACLC,IAAI,EAAE,YAAY;IAClBC,OAAO,EAAE;MACLoB,QAAQ,EAAE,KAAK;MACfC,WAAW,EAAE,EAAE;MACfiE,eAAe,EAAE,EAAE;MACnBhE,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,IAAI;MAChBrB,MAAM,EAAE;QAAE,GAAGL,KAAK,CAACK,MAAM;QAAEsE,WAAW,EAAE;MAAG,CAAC;MAC5CxD,UAAU,EAAEtB,mBAAmB,CAAC,EAAE,EAAE,EAAE,EAAEG,KAAK,CAACK,MAAM,EAAE,EAAE;IAC5D;EACJ,CAAC,CAAC;EACFwB,UAAU,CAAC/B,IAAI,CAAC+F,0BAA0B,EAAE,IAAI,CAAC;AACrD;AAEA,SAAS1C,sBAAsBA,CAACnD,KAAK,EAAEC,QAAQ,EAAE;EAC7C,MAAM6F,eAAe,GAAG9F,KAAK,CAAC+F,QAAQ,CAACC,IAAI,CAACzD,CAAC,IAAIA,CAAC,CAACuB,IAAI,KAAK,SAAS,CAAC;EACtE,MAAMmC,aAAa,GAAGxD,IAAI,CAACyD,IAAI,CAACzD,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EACtD,MAAM4C,SAAS,GAAG1D,IAAI,CAACa,KAAK,CAACb,IAAI,CAACc,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EAC/C,MAAM6C,UAAU,GAAG;IAAE,GAAGN,eAAe;IAAEtD,MAAM,EAAE;EAAK,CAAC;EACvD,QAAQ2D,SAAS;IACb,KAAK,CAAC;MAAE;MACJC,UAAU,CAACnF,CAAC,GAAGjB,KAAK,CAACK,MAAM,CAACY,CAAC;MAC7BmF,UAAU,CAAClF,CAAC,GAAGuB,IAAI,CAAC4D,GAAG,CAAC,CAAC,EAAErG,KAAK,CAACK,MAAM,CAACa,CAAC,GAAG+E,aAAa,CAAC;MAC1D;IACJ,KAAK,CAAC;MAAE;MACJG,UAAU,CAACnF,CAAC,GAAGjB,KAAK,CAACK,MAAM,CAACY,CAAC;MAC7BmF,UAAU,CAAClF,CAAC,GAAGuB,IAAI,CAAC6D,GAAG,CAAC,GAAG,EAAEtG,KAAK,CAACK,MAAM,CAACa,CAAC,GAAG+E,aAAa,CAAC;MAC5D;IACJ,KAAK,CAAC;MAAE;MACJG,UAAU,CAACnF,CAAC,GAAGwB,IAAI,CAAC4D,GAAG,CAAC,CAAC,EAAErG,KAAK,CAACK,MAAM,CAACY,CAAC,GAAGgF,aAAa,CAAC;MAC1DG,UAAU,CAAClF,CAAC,GAAGlB,KAAK,CAACK,MAAM,CAACa,CAAC;MAC7B;IACJ,KAAK,CAAC;MAAE;MACJkF,UAAU,CAACnF,CAAC,GAAGwB,IAAI,CAAC6D,GAAG,CAAC,EAAE,EAAEtG,KAAK,CAACK,MAAM,CAACY,CAAC,GAAGgF,aAAa,CAAC;MAC3DG,UAAU,CAAClF,CAAC,GAAGlB,KAAK,CAACK,MAAM,CAACa,CAAC;MAC7B;EACR;EACAjB,QAAQ,CAAC;IACLC,IAAI,EAAE,oBAAoB;IAC1BC,OAAO,EAAE;MAAEW,OAAO,EAAEsF;IAAW;EACnC,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}