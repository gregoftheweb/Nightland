{"ast":null,"code":"// nightland/src/modules/movement.js\nexport const initializePositions = state => {\n  const player = document.querySelector('#player');\n  const redoubt = document.querySelector('#redoubt');\n  const gameBoard = document.querySelector('.game-board');\n  if (player && state.player.position) {\n    player.style.left = `${state.player.position.x}px`;\n    player.style.top = `${state.player.position.y}px`;\n    player.style.transform = 'none';\n    player.style.visibility = 'visible';\n    player.style.opacity = '1';\n  }\n  if (redoubt && state.redoubt.position) {\n    redoubt.style.left = `${state.redoubt.position.x}px`;\n    redoubt.style.top = `${state.redoubt.position.y}px`;\n    redoubt.style.transform = 'none';\n    redoubt.style.visibility = 'visible';\n    redoubt.style.opacity = '1';\n  }\n  if (gameBoard) {\n    updateViewport(state);\n  }\n};\nexport const handleMovePlayer = (state, dispatch, key, showDialog) => {\n  const moveDistance = 40; // Match tileSize or element size (40px)\n  const newPosition = {\n    ...state.player.position\n  };\n  switch (key) {\n    case 'ArrowUp':\n      newPosition.y = Math.max(0, newPosition.y - moveDistance); // Prevent going off top (y >= 0)\n      break;\n    case 'ArrowDown':\n      newPosition.y = Math.min(1960, newPosition.y + moveDistance); // Prevent going off bottom (y <= 1960)\n      break;\n    case 'ArrowLeft':\n      newPosition.x = Math.max(0, newPosition.x - moveDistance); // Prevent going off left (x >= 0)\n      break;\n    case 'ArrowRight':\n      newPosition.x = Math.min(1960, newPosition.x + moveDistance); // Prevent going off right (x <= 1960)\n      break;\n    default:\n      return;\n  }\n  dispatch({\n    type: 'MOVE_PLAYER',\n    payload: {\n      position: newPosition\n    }\n  });\n  showDialog(`Player moved ${key.toLowerCase().replace('arrow', '')}`);\n\n  // Update DOM and viewport\n  const player = document.querySelector('#player');\n  if (player) {\n    console.log('Updating player DOM position to:', newPosition);\n    player.style.left = `${newPosition.x}px`;\n    player.style.top = `${newPosition.y}px`;\n    player.style.transform = 'none';\n    player.style.visibility = 'visible';\n    player.style.opacity = '1';\n  }\n  updateViewport(state);\n};\nexport const updateViewport = state => {\n  const viewportWidth = window.innerWidth;\n  const viewportHeight = window.innerHeight;\n  const statusBarHeight = 42; // Height of status bar\n  const playerX = state.player.position.x;\n  const playerY = state.player.position.y;\n  const edgeDistance = 100; // Distance from edges to trigger scrolling\n  const maxX = 1960; // Maximum x position on 2000x2000 game board\n  const maxY = 1960; // Maximum y position on 2000x2000 game board\n  const middleY = viewportHeight / 2; // Middle of the viewport\n\n  let translateX = -playerX + viewportWidth / 2 - 40 / 2; // Center player horizontally\n  let translateY = -(state.redoubt.position.y + 160 - viewportHeight + statusBarHeight); // Align redoubt bottom with top of status bar\n\n  // Calculate player's position in the viewport after initial translation\n  let playerViewportY = playerY + translateY;\n\n  // Check if player has reached the middle of the viewport vertically\n  if (playerViewportY <= middleY) {\n    translateY = -playerY + middleY; // Center player exactly at middleY\n  }\n\n  // Prevent scrolling past top or bottom of game board\n  if (playerY < edgeDistance) {\n    translateY = -playerY + edgeDistance;\n  } else if (playerY > maxY - edgeDistance) {\n    translateY = -(playerY - (viewportHeight - statusBarHeight - edgeDistance));\n  }\n\n  // Horizontal scrolling if player is within edgeDistance of left or right edges\n  if (playerX < edgeDistance) {\n    translateX = -playerX + edgeDistance;\n  } else if (playerX > maxX - edgeDistance) {\n    translateX = -(playerX - (viewportWidth - edgeDistance));\n  }\n\n  // Apply transform to game board\n  const gameBoard = document.querySelector('.game-board');\n  if (gameBoard) {\n    gameBoard.style.transform = `translate(${translateX}px, ${translateY}px)`;\n    gameBoard.style.transition = 'transform 0.2s ease';\n  }\n};","map":{"version":3,"names":["initializePositions","state","player","document","querySelector","redoubt","gameBoard","position","style","left","x","top","y","transform","visibility","opacity","updateViewport","handleMovePlayer","dispatch","key","showDialog","moveDistance","newPosition","Math","max","min","type","payload","toLowerCase","replace","console","log","viewportWidth","window","innerWidth","viewportHeight","innerHeight","statusBarHeight","playerX","playerY","edgeDistance","maxX","maxY","middleY","translateX","translateY","playerViewportY","transition"],"sources":["/mnt/devplex/Nightland/nightland/src/modules/movement.js"],"sourcesContent":["// nightland/src/modules/movement.js\nexport const initializePositions = (state) => {\n    const player = document.querySelector('#player');\n    const redoubt = document.querySelector('#redoubt');\n    const gameBoard = document.querySelector('.game-board');\n\n    if (player && state.player.position) {\n        player.style.left = `${state.player.position.x}px`;\n        player.style.top = `${state.player.position.y}px`;\n        player.style.transform = 'none';\n        player.style.visibility = 'visible';\n        player.style.opacity = '1';\n    }\n\n    if (redoubt && state.redoubt.position) {\n        redoubt.style.left = `${state.redoubt.position.x}px`;\n        redoubt.style.top = `${state.redoubt.position.y}px`;\n        redoubt.style.transform = 'none';\n        redoubt.style.visibility = 'visible';\n        redoubt.style.opacity = '1';\n    }\n\n    if (gameBoard) {\n        updateViewport(state);\n    }\n};\n\nexport const handleMovePlayer = (state, dispatch, key, showDialog) => {\n    const moveDistance = 40; // Match tileSize or element size (40px)\n    const newPosition = { ...state.player.position };\n\n    switch (key) {\n        case 'ArrowUp':\n            newPosition.y = Math.max(0, newPosition.y - moveDistance); // Prevent going off top (y >= 0)\n            break;\n        case 'ArrowDown':\n            newPosition.y = Math.min(1960, newPosition.y + moveDistance); // Prevent going off bottom (y <= 1960)\n            break;\n        case 'ArrowLeft':\n            newPosition.x = Math.max(0, newPosition.x - moveDistance); // Prevent going off left (x >= 0)\n            break;\n        case 'ArrowRight':\n            newPosition.x = Math.min(1960, newPosition.x + moveDistance); // Prevent going off right (x <= 1960)\n            break;\n        default:\n            return;\n    }\n\n    dispatch({ type: 'MOVE_PLAYER', payload: { position: newPosition } });\n    showDialog(`Player moved ${key.toLowerCase().replace('arrow', '')}`);\n\n    // Update DOM and viewport\n    const player = document.querySelector('#player');\n    if (player) {\n        console.log('Updating player DOM position to:', newPosition);\n        player.style.left = `${newPosition.x}px`;\n        player.style.top = `${newPosition.y}px`;\n        player.style.transform = 'none';\n        player.style.visibility = 'visible';\n        player.style.opacity = '1';\n    }\n\n    updateViewport(state);\n};\n\nexport const updateViewport = (state) => {\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n    const statusBarHeight = 42; // Height of status bar\n    const playerX = state.player.position.x;\n    const playerY = state.player.position.y;\n    const edgeDistance = 100; // Distance from edges to trigger scrolling\n    const maxX = 1960; // Maximum x position on 2000x2000 game board\n    const maxY = 1960; // Maximum y position on 2000x2000 game board\n    const middleY = viewportHeight / 2; // Middle of the viewport\n\n    let translateX = -playerX + (viewportWidth / 2) - (40 / 2); // Center player horizontally\n    let translateY = -(state.redoubt.position.y + 160 - viewportHeight + statusBarHeight); // Align redoubt bottom with top of status bar\n\n    // Calculate player's position in the viewport after initial translation\n    let playerViewportY = playerY + translateY;\n\n    // Check if player has reached the middle of the viewport vertically\n    if (playerViewportY <= middleY) {\n        translateY = -playerY + middleY; // Center player exactly at middleY\n    }\n\n    // Prevent scrolling past top or bottom of game board\n    if (playerY < edgeDistance) {\n        translateY = -playerY + edgeDistance;\n    } else if (playerY > maxY - edgeDistance) {\n        translateY = -(playerY - (viewportHeight - statusBarHeight - edgeDistance));\n    }\n\n    // Horizontal scrolling if player is within edgeDistance of left or right edges\n    if (playerX < edgeDistance) {\n        translateX = -playerX + edgeDistance;\n    } else if (playerX > maxX - edgeDistance) {\n        translateX = -(playerX - (viewportWidth - edgeDistance));\n    }\n\n    // Apply transform to game board\n    const gameBoard = document.querySelector('.game-board');\n    if (gameBoard) {\n        gameBoard.style.transform = `translate(${translateX}px, ${translateY}px)`;\n        gameBoard.style.transition = 'transform 0.2s ease';\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}