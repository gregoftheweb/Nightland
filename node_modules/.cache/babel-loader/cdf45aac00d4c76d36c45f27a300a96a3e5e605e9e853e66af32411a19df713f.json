{"ast":null,"code":"var _jsxFileName = \"/mnt/devplex/Nightland/nightland/src/components/Combat.js\",\n  _s = $RefreshSig$();\n// nightland/src/components/Combat.js\nimport React, { useEffect } from 'react';\nimport { updateCombatDialogs } from '../modules/utils';\nimport Dialog from './Dialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Combat = ({\n  state,\n  dispatch\n}) => {\n  _s();\n  useEffect(() => {\n    combatStep(state, dispatch);\n  }, [state.combatTurn]);\n  const dialogData = updateCombatDialogs(\"\", state.attackSlots.map(slot => slot.monster.lastComment || \"\"), state.player, state.attackSlots.map(slot => slot.monster));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"combat\",\n    children: [/*#__PURE__*/_jsxDEV(Dialog, {\n      data: dialogData.player,\n      index: \"player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), dialogData.enemies.map((enemy, i) => enemy && /*#__PURE__*/_jsxDEV(Dialog, {\n      data: enemy,\n      index: i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n_s(Combat, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Combat;\nlet roundNumber = 1;\nfunction combatStep(state, dispatch) {\n  if (!state.inCombat || !state.turnOrder.length) return;\n  const current = state.combatTurn;\n  const currentIndex = state.turnOrder.indexOf(current);\n  const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n  let allMonsters = state.attackSlots.map(slot => slot.monster);\n  let playerComment = \"\";\n  let enemyComments = allMonsters.map(() => \"\");\n  if (currentIndex > 1 || roundNumber > 1) {\n    updateCombatDialogs(\"\", allMonsters.map(() => \"\"), state.player, allMonsters);\n  }\n  if (current === state.player) {\n    const target = activeMonsters[0];\n    if (target) {\n      if (Math.random() < 0.8) {\n        target.hp -= 6;\n        playerComment = \"You hit for 6 points!\";\n        enemyComments = allMonsters.map(slot => slot === target && slot.hp <= 0 ? \"Monster is dead!\" : \"\");\n        if (target.hp <= 0) {\n          calculateTurnOrder(state, dispatch);\n        }\n      } else {\n        playerComment = \"You miss!\";\n      }\n    }\n  } else if (activeMonsters.includes(current)) {\n    const monsterIndex = allMonsters.indexOf(current);\n    const isFirstLivingMonster = currentIndex === 1 && allMonsters.some(m => m && m.hp <= 0);\n    if (isFirstLivingMonster) {\n      const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n      allMonsters = newAttackSlots.map(slot => slot.monster);\n      dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n          inCombat: true,\n          attackSlots: newAttackSlots\n        }\n      });\n      for (let i = 1; i <= 4; i++) {\n        const enemyDiv = document.getElementById(`combat-enemy-${i}`);\n        if (enemyDiv && enemyDiv.style.display !== 'none') {\n          enemyDiv.classList.remove('flicker');\n          enemyDiv.classList.add('flicker');\n          setTimeout(() => enemyDiv.classList.remove('flicker'), 500);\n        }\n      }\n    }\n    if (Math.random() < 0.5) {\n      const newHp = state.player.hp - 4;\n      enemyComments[monsterIndex] = \"He hit you for 4 points!\";\n      allMonsters[monsterIndex].lastComment = \"He hit you for 4 points!\";\n      dispatch({\n        type: 'UPDATE_PLAYER_HP',\n        payload: {\n          hp: newHp\n        }\n      });\n    } else {\n      enemyComments[monsterIndex] = \"He missed you!\";\n      allMonsters[monsterIndex].lastComment = \"He missed you!\";\n    }\n  }\n  updateCombatDialogs(playerComment, enemyComments, state.player, allMonsters);\n  if (state.player.hp <= 0) {\n    updateCombatDialogs(\"You have perished!\", activeMonsters.map(() => \"Victory over the human!\"), state.player, allMonsters);\n    endCombat(state, dispatch);\n  } else if (activeMonsters.length === 0 && state.waitingMonsters.length === 0) {\n    updateCombatDialogs(\"Victory is yours!\", allMonsters.map(() => \"\"), state.player, allMonsters);\n    endCombat(state, dispatch);\n  } else {\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: true,\n        attackSlots: state.attackSlots,\n        turnOrder: state.turnOrder,\n        combatTurn: state.turnOrder[(currentIndex + 1) % state.turnOrder.length]\n      }\n    });\n    moveWaitingMonsters(state, dispatch);\n    if (current === state.turnOrder[state.turnOrder.length - 1]) {\n      resolveRound(state, dispatch);\n      calculateTurnOrder(state, dispatch);\n      roundNumber++;\n    }\n  }\n}\nfunction calculateTurnOrder(state, dispatch) {\n  const combatants = [state.player, ...state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0)];\n  const newTurnOrder = combatants.filter(c => c.hp > 0);\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: state.inCombat,\n      attackSlots: state.attackSlots,\n      turnOrder: newTurnOrder,\n      combatTurn: newTurnOrder[0]\n    }\n  });\n}\nfunction resolveRound(state, dispatch) {\n  const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n  const deadMonsters = state.attackSlots.filter(slot => slot.monster && slot.monster.hp <= 0);\n  if (deadMonsters.length > 0) {\n    deadMonsters.forEach(slot => {\n      slot.monster.active = false;\n      if (state.waitingMonsters.length > 0) {\n        const nextMonster = state.waitingMonsters.shift();\n        nextMonster.x = slot.position.x;\n        nextMonster.y = slot.position.y;\n        slot.monster = nextMonster;\n      } else {\n        slot.monster = null;\n      }\n    });\n    const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: true,\n        attackSlots: newAttackSlots\n      }\n    });\n  }\n  moveWaitingMonsters(state, dispatch);\n  calculateTurnOrder(state, dispatch);\n}\nfunction moveWaitingMonsters(state, dispatch) {\n  const activeMonsters = state.activeMonsters.filter(m => m.active && m.hp > 0);\n  const allAttackSlotsFull = state.attackSlots.length >= state.maxAttackers;\n  activeMonsters.forEach(monster => {\n    if (monster.hp > 0 && !state.attackSlots.some(slot => slot.monster === monster)) {\n      const dx = Math.abs(monster.x - state.player.x);\n      const dy = Math.abs(monster.y - state.player.y);\n      if (allAttackSlotsFull && (dx <= 2 || dy <= 2)) {\n        if (!state.waitingMonsters.includes(monster)) {\n          dispatch({\n            type: 'UPDATE_WAITING_MONSTERS',\n            payload: {\n              waitingMonsters: [...state.waitingMonsters, monster]\n            }\n          });\n        }\n      } else {\n        // Move logic here if needed\n      }\n    }\n  });\n}\nfunction endCombat(state, dispatch) {\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: false,\n      attackSlots: [],\n      waitingMonsters: [],\n      turnOrder: [],\n      combatTurn: null\n    }\n  });\n  // Reset logic here if needed\n  roundNumber = 1;\n}\nexport default Combat;\nvar _c;\n$RefreshReg$(_c, \"Combat\");","map":{"version":3,"names":["React","useEffect","updateCombatDialogs","Dialog","jsxDEV","_jsxDEV","Combat","state","dispatch","_s","combatStep","combatTurn","dialogData","attackSlots","map","slot","monster","lastComment","player","className","children","data","index","fileName","_jsxFileName","lineNumber","columnNumber","enemies","enemy","i","_c","roundNumber","inCombat","turnOrder","length","current","currentIndex","indexOf","activeMonsters","filter","m","hp","allMonsters","playerComment","enemyComments","target","Math","random","calculateTurnOrder","includes","monsterIndex","isFirstLivingMonster","some","newAttackSlots","s","type","payload","enemyDiv","document","getElementById","style","display","classList","remove","add","setTimeout","newHp","endCombat","waitingMonsters","moveWaitingMonsters","resolveRound","combatants","newTurnOrder","c","deadMonsters","forEach","active","nextMonster","shift","x","position","y","allAttackSlotsFull","maxAttackers","dx","abs","dy","$RefreshReg$"],"sources":["/mnt/devplex/Nightland/nightland/src/components/Combat.js"],"sourcesContent":["// nightland/src/components/Combat.js\nimport React, { useEffect } from 'react';\nimport { updateCombatDialogs } from '../modules/utils';\nimport Dialog from './Dialog';\n\nconst Combat = ({ state, dispatch }) => {\n    useEffect(() => {\n        combatStep(state, dispatch);\n    }, [state.combatTurn]);\n\n    const dialogData = updateCombatDialogs(\"\", state.attackSlots.map(slot => slot.monster.lastComment || \"\"), state.player, state.attackSlots.map(slot => slot.monster));\n\n    return (\n        <div className=\"combat\">\n            <Dialog data={dialogData.player} index=\"player\" />\n            {dialogData.enemies.map((enemy, i) => enemy && (\n                <Dialog key={i} data={enemy} index={i} />\n            ))}\n        </div>\n    );\n};\n\nlet roundNumber = 1;\n\nfunction combatStep(state, dispatch) {\n    if (!state.inCombat || !state.turnOrder.length) return;\n\n    const current = state.combatTurn;\n    const currentIndex = state.turnOrder.indexOf(current);\n    const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n    let allMonsters = state.attackSlots.map(slot => slot.monster);\n    let playerComment = \"\";\n    let enemyComments = allMonsters.map(() => \"\");\n\n    if (currentIndex > 1 || roundNumber > 1) {\n        updateCombatDialogs(\"\", allMonsters.map(() => \"\"), state.player, allMonsters);\n    }\n\n    if (current === state.player) {\n        const target = activeMonsters[0];\n        if (target) {\n            if (Math.random() < 0.8) {\n                target.hp -= 6;\n                playerComment = \"You hit for 6 points!\";\n                enemyComments = allMonsters.map(slot => slot === target && slot.hp <= 0 ? \"Monster is dead!\" : \"\");\n                if (target.hp <= 0) {\n                    calculateTurnOrder(state, dispatch);\n                }\n            } else {\n                playerComment = \"You miss!\";\n            }\n        }\n    } else if (activeMonsters.includes(current)) {\n        const monsterIndex = allMonsters.indexOf(current);\n        const isFirstLivingMonster = currentIndex === 1 && allMonsters.some(m => m && m.hp <= 0);\n        if (isFirstLivingMonster) {\n            const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n            allMonsters = newAttackSlots.map(slot => slot.monster);\n            dispatch({ type: 'SET_COMBAT', payload: { inCombat: true, attackSlots: newAttackSlots } });\n            for (let i = 1; i <= 4; i++) {\n                const enemyDiv = document.getElementById(`combat-enemy-${i}`);\n                if (enemyDiv && enemyDiv.style.display !== 'none') {\n                    enemyDiv.classList.remove('flicker');\n                    enemyDiv.classList.add('flicker');\n                    setTimeout(() => enemyDiv.classList.remove('flicker'), 500);\n                }\n            }\n        }\n\n        if (Math.random() < 0.5) {\n            const newHp = state.player.hp - 4;\n            enemyComments[monsterIndex] = \"He hit you for 4 points!\";\n            allMonsters[monsterIndex].lastComment = \"He hit you for 4 points!\";\n            dispatch({ type: 'UPDATE_PLAYER_HP', payload: { hp: newHp } });\n        } else {\n            enemyComments[monsterIndex] = \"He missed you!\";\n            allMonsters[monsterIndex].lastComment = \"He missed you!\";\n        }\n    }\n\n    updateCombatDialogs(playerComment, enemyComments, state.player, allMonsters);\n\n    if (state.player.hp <= 0) {\n        updateCombatDialogs(\"You have perished!\", activeMonsters.map(() => \"Victory over the human!\"), state.player, allMonsters);\n        endCombat(state, dispatch);\n    } else if (activeMonsters.length === 0 && state.waitingMonsters.length === 0) {\n        updateCombatDialogs(\"Victory is yours!\", allMonsters.map(() => \"\"), state.player, allMonsters);\n        endCombat(state, dispatch);\n    } else {\n        dispatch({\n            type: 'SET_COMBAT',\n            payload: {\n                inCombat: true,\n                attackSlots: state.attackSlots,\n                turnOrder: state.turnOrder,\n                combatTurn: state.turnOrder[(currentIndex + 1) % state.turnOrder.length]\n            }\n        });\n        moveWaitingMonsters(state, dispatch);\n\n        if (current === state.turnOrder[state.turnOrder.length - 1]) {\n            resolveRound(state, dispatch);\n            calculateTurnOrder(state, dispatch);\n            roundNumber++;\n        }\n    }\n}\n\nfunction calculateTurnOrder(state, dispatch) {\n    const combatants = [state.player, ...state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0)];\n    const newTurnOrder = combatants.filter(c => c.hp > 0);\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: state.inCombat,\n            attackSlots: state.attackSlots,\n            turnOrder: newTurnOrder,\n            combatTurn: newTurnOrder[0]\n        }\n    });\n}\n\nfunction resolveRound(state, dispatch) {\n    const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n    const deadMonsters = state.attackSlots.filter(slot => slot.monster && slot.monster.hp <= 0);\n\n    if (deadMonsters.length > 0) {\n        deadMonsters.forEach(slot => {\n            slot.monster.active = false;\n            if (state.waitingMonsters.length > 0) {\n                const nextMonster = state.waitingMonsters.shift();\n                nextMonster.x = slot.position.x;\n                nextMonster.y = slot.position.y;\n                slot.monster = nextMonster;\n            } else {\n                slot.monster = null;\n            }\n        });\n        const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n        dispatch({ type: 'SET_COMBAT', payload: { inCombat: true, attackSlots: newAttackSlots } });\n    }\n\n    moveWaitingMonsters(state, dispatch);\n    calculateTurnOrder(state, dispatch);\n}\n\nfunction moveWaitingMonsters(state, dispatch) {\n    const activeMonsters = state.activeMonsters.filter(m => m.active && m.hp > 0);\n    const allAttackSlotsFull = state.attackSlots.length >= state.maxAttackers;\n    activeMonsters.forEach(monster => {\n        if (monster.hp > 0 && !state.attackSlots.some(slot => slot.monster === monster)) {\n            const dx = Math.abs(monster.x - state.player.x);\n            const dy = Math.abs(monster.y - state.player.y);\n            if (allAttackSlotsFull && (dx <= 2 || dy <= 2)) {\n                if (!state.waitingMonsters.includes(monster)) {\n                    dispatch({\n                        type: 'UPDATE_WAITING_MONSTERS',\n                        payload: { waitingMonsters: [...state.waitingMonsters, monster] }\n                    });\n                }\n            } else {\n                // Move logic here if needed\n            }\n        }\n    });\n}\n\nfunction endCombat(state, dispatch) {\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: false,\n            attackSlots: [],\n            waitingMonsters: [],\n            turnOrder: [],\n            combatTurn: null\n        }\n    });\n    // Reset logic here if needed\n    roundNumber = 1;\n}\n\nexport default Combat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}