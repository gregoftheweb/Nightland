{"ast":null,"code":"// nightland/src/modules/gameState.js\nconst initialState = {\n  player: {\n    position: {\n      x: 8000,\n      y: 15780\n    },\n    // Bottom center (8000 = 16000/2, 15780 = 16000 - 220 for player height + gap above redoubt)\n    hp: 100,\n    name: \"Christos\",\n    description: \"One of the humans from the Last Redoubt.\",\n    initiative: 10,\n    lastComment: \"\"\n  },\n  monsters: [{\n    position: {\n      x: 0,\n      y: 0\n    },\n    // Top-left corner for now (can be updated dynamically)\n    hp: 20,\n    name: \"Abhuman\",\n    description: \"Created from corrupted human stock ages ago, their hatred of humans is bone deep and drives them to kill.\",\n    active: false,\n    type: \"regular\",\n    initiative: 5,\n    maxInstances: 4\n  }],\n  greatPowers: [{\n    position: {\n      x: 12000,\n      y: 2000\n    },\n    // Far up, off-screen initially (adjust as needed for 16000x16000)\n    width: 4,\n    height: 4,\n    name: \"The Watcher of the South East\",\n    description: \"One of the great powers and a source of great evil. It watches, silent, for Aeons.\",\n    type: \"greatPower\",\n    initiative: 8,\n    maxInstances: 1\n  }],\n  redoubt: {\n    position: {\n      x: 8000,\n      y: 15600\n    },\n    // Bottom center, 60px above status bar (8000 = 16000/2, 15840 = 16000 - 160 for redoubt height)\n    name: \"The Last Redoubt\",\n    description: \"The last haven of mankind save one. It protects millions of souls from the horrors of the Nightland.\"\n  },\n  mapWidth: 400,\n  // 400 tiles wide (16000px / 40px per tile)\n  mapHeight: 400,\n  // 400 tiles tall (16000px / 40px per tile)\n  tileSize: 40,\n  // Each tile is 40px × 40px\n  viewHeight: 800,\n  // Viewport height (can adjust based on screen size)\n  map: Array(400).fill().map(() => Array(400).fill('.')),\n  // 400x400 grid of empty tiles\n  audioStarted: false,\n  moveCount: 0,\n  spawnThreshold: Math.floor(Math.random() * 7) + 4,\n  inCombat: false,\n  combatTurn: null,\n  turnOrder: [],\n  maxAttackers: 4,\n  attackSlots: [],\n  waitingMonsters: [],\n  dialogData: {\n    player: {\n      name: 'Christos',\n      hp: 100,\n      comment: ''\n    },\n    enemies: []\n  },\n  activeMonsters: []\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'MOVE_PLAYER':\n      return {\n        ...state,\n        player: {\n          ...state.player,\n          position: action.payload.position\n        }\n      };\n    case 'MOVE_MONSTER':\n      return {\n        ...state,\n        monsters: state.monsters.map(monster => monster.name === action.payload.name ? {\n          ...monster,\n          position: action.payload.position\n        } : monster)\n      };\n    case 'MOVE_GREAT_POWER':\n      return {\n        ...state,\n        greatPowers: state.greatPowers.map(power => power.name === action.payload.name ? {\n          ...power,\n          position: action.payload.position\n        } : power)\n      };\n    case 'MOVE_REDOUBT':\n      return {\n        ...state,\n        redoubt: {\n          ...state.redoubt,\n          position: action.payload.position\n        }\n      };\n    case 'UPDATE_PLAYER_HP':\n      return {\n        ...state,\n        player: {\n          ...state.player,\n          hp: action.payload.hp\n        }\n      };\n    case 'SET_COMBAT':\n      return {\n        ...state,\n        inCombat: action.payload.inCombat,\n        attackSlots: action.payload.attackSlots || state.attackSlots,\n        turnOrder: action.payload.turnOrder || state.turnOrder,\n        combatTurn: action.payload.combatTurn || state.combatTurn,\n        player: action.payload.player || state.player,\n        dialogData: action.payload.dialogData || state.dialogData\n      };\n    case 'ADD_ACTIVE_MONSTER':\n      return {\n        ...state,\n        activeMonsters: [...state.activeMonsters, action.payload.monster]\n      };\n    case 'UPDATE_WAITING_MONSTERS':\n      return {\n        ...state,\n        waitingMonsters: action.payload.waitingMonsters\n      };\n    case 'UPDATE_MOVE_COUNT':\n      return {\n        ...state,\n        moveCount: action.payload.moveCount\n      };\n    case 'UPDATE_SPAWN_THRESHOLD':\n      return {\n        ...state,\n        spawnThreshold: action.payload.spawnThreshold\n      };\n    default:\n      return state;\n  }\n};\nexport { initialState, reducer };","map":{"version":3,"names":["initialState","player","position","x","y","hp","name","description","initiative","lastComment","monsters","active","type","maxInstances","greatPowers","width","height","redoubt","mapWidth","mapHeight","tileSize","viewHeight","map","Array","fill","audioStarted","moveCount","spawnThreshold","Math","floor","random","inCombat","combatTurn","turnOrder","maxAttackers","attackSlots","waitingMonsters","dialogData","comment","enemies","activeMonsters","reducer","state","action","payload","monster","power"],"sources":["/mnt/devplex/Nightland/nightland/src/modules/gameState.js"],"sourcesContent":["// nightland/src/modules/gameState.js\nconst initialState = {\n    player: {\n        position: { x: 8000, y: 15780 }, // Bottom center (8000 = 16000/2, 15780 = 16000 - 220 for player height + gap above redoubt)\n        hp: 100,\n        name: \"Christos\",\n        description: \"One of the humans from the Last Redoubt.\",\n        initiative: 10,\n        lastComment: \"\"\n    },\n    monsters: [\n        {\n            position: { x: 0, y: 0 }, // Top-left corner for now (can be updated dynamically)\n            hp: 20,\n            name: \"Abhuman\",\n            description: \"Created from corrupted human stock ages ago, their hatred of humans is bone deep and drives them to kill.\",\n            active: false,\n            type: \"regular\",\n            initiative: 5,\n            maxInstances: 4\n        }\n    ],\n    greatPowers: [\n        {\n            position: { x: 12000, y: 2000 }, // Far up, off-screen initially (adjust as needed for 16000x16000)\n            width: 4,\n            height: 4,\n            name: \"The Watcher of the South East\",\n            description: \"One of the great powers and a source of great evil. It watches, silent, for Aeons.\",\n            type: \"greatPower\",\n            initiative: 8,\n            maxInstances: 1\n        }\n    ],\n    redoubt: {\n        position: { x: 8000, y: 15600 }, // Bottom center, 60px above status bar (8000 = 16000/2, 15840 = 16000 - 160 for redoubt height)\n        name: \"The Last Redoubt\",\n        description: \"The last haven of mankind save one. It protects millions of souls from the horrors of the Nightland.\"\n    },\n    mapWidth: 400,    // 400 tiles wide (16000px / 40px per tile)\n    mapHeight: 400,   // 400 tiles tall (16000px / 40px per tile)\n    tileSize: 40,     // Each tile is 40px × 40px\n    viewHeight: 800,  // Viewport height (can adjust based on screen size)\n    map: Array(400).fill().map(() => Array(400).fill('.')), // 400x400 grid of empty tiles\n    audioStarted: false,\n    moveCount: 0,\n    spawnThreshold: Math.floor(Math.random() * 7) + 4,\n    inCombat: false,\n    combatTurn: null,\n    turnOrder: [],\n    maxAttackers: 4,\n    attackSlots: [],\n    waitingMonsters: [],\n    dialogData: {\n        player: { name: 'Christos', hp: 100, comment: '' },\n        enemies: []\n    },\n    activeMonsters: []\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'MOVE_PLAYER':\n            return {\n                ...state,\n                player: {\n                    ...state.player,\n                    position: action.payload.position\n                }\n            };\n        case 'MOVE_MONSTER':\n            return {\n                ...state,\n                monsters: state.monsters.map(monster =>\n                    monster.name === action.payload.name\n                        ? { ...monster, position: action.payload.position }\n                        : monster\n                )\n            };\n        case 'MOVE_GREAT_POWER':\n            return {\n                ...state,\n                greatPowers: state.greatPowers.map(power =>\n                    power.name === action.payload.name\n                        ? { ...power, position: action.payload.position }\n                        : power\n                )\n            };\n        case 'MOVE_REDOUBT':\n            return {\n                ...state,\n                redoubt: {\n                    ...state.redoubt,\n                    position: action.payload.position\n                }\n            };\n        case 'UPDATE_PLAYER_HP':\n            return {\n                ...state,\n                player: { ...state.player, hp: action.payload.hp }\n            };\n        case 'SET_COMBAT':\n            return {\n                ...state,\n                inCombat: action.payload.inCombat,\n                attackSlots: action.payload.attackSlots || state.attackSlots,\n                turnOrder: action.payload.turnOrder || state.turnOrder,\n                combatTurn: action.payload.combatTurn || state.combatTurn,\n                player: action.payload.player || state.player,\n                dialogData: action.payload.dialogData || state.dialogData\n            };\n        case 'ADD_ACTIVE_MONSTER':\n            return {\n                ...state,\n                activeMonsters: [...state.activeMonsters, action.payload.monster]\n            };\n        case 'UPDATE_WAITING_MONSTERS':\n            return {\n                ...state,\n                waitingMonsters: action.payload.waitingMonsters\n            };\n        case 'UPDATE_MOVE_COUNT':\n            return {\n                ...state,\n                moveCount: action.payload.moveCount\n            };\n        case 'UPDATE_SPAWN_THRESHOLD':\n            return {\n                ...state,\n                spawnThreshold: action.payload.spawnThreshold\n            };\n        default:\n            return state;\n    }\n};\n\nexport { initialState, reducer };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}