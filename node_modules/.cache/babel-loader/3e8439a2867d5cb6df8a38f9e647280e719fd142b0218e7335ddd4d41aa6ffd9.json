{"ast":null,"code":"var _jsxFileName = \"/mnt/devplex/Nightland/nightland/src/components/Combat.js\",\n  _s = $RefreshSig$();\n// nightland/src/components/Combat.js\nimport React, { useEffect, useState } from 'react';\nimport Dialog from './Dialog';\nimport { updateCombatDialogs } from '../modules/utils'; // Adjust path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction calculateTurnOrder(state, dispatch) {\n  const combatants = [state.player, ...state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0)];\n  const newTurnOrder = combatants.filter(c => c.hp > 0);\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: state.inCombat,\n      attackSlots: state.attackSlots,\n      turnOrder: newTurnOrder,\n      combatTurn: newTurnOrder[0]\n    }\n  });\n}\nfunction resolveRound(state, dispatch) {\n  const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n  const deadMonsters = state.attackSlots.filter(slot => slot.monster && slot.monster.hp <= 0);\n  if (deadMonsters.length > 0) {\n    deadMonsters.forEach(slot => {\n      slot.monster.active = false;\n      if (state.waitingMonsters.length > 0) {\n        const nextMonster = state.waitingMonsters.shift();\n        nextMonster.x = slot.position.x;\n        nextMonster.y = slot.position.y;\n        slot.monster = nextMonster;\n      } else {\n        slot.monster = null;\n      }\n    });\n    const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: true,\n        attackSlots: newAttackSlots\n      }\n    });\n  }\n  moveWaitingMonsters(state, dispatch);\n  calculateTurnOrder(state, dispatch);\n}\nfunction moveWaitingMonsters(state, dispatch) {\n  const activeMonsters = state.activeMonsters.filter(m => m.active && m.hp > 0);\n  const allAttackSlotsFull = state.attackSlots.length >= state.maxAttackers;\n  activeMonsters.forEach(monster => {\n    if (monster.hp > 0 && !state.attackSlots.some(slot => slot.monster === monster)) {\n      const dx = Math.abs(monster.x - state.player.x);\n      const dy = Math.abs(monster.y - state.player.y);\n      if (allAttackSlotsFull && (dx <= 2 || dy <= 2)) {\n        if (!state.waitingMonsters.includes(monster)) {\n          dispatch({\n            type: 'UPDATE_WAITING_MONSTERS',\n            payload: {\n              waitingMonsters: [...state.waitingMonsters, monster]\n            }\n          });\n        }\n      }\n    }\n  });\n}\nfunction endCombat(state, dispatch) {\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: false,\n      attackSlots: [],\n      waitingMonsters: [],\n      turnOrder: [],\n      combatTurn: null,\n      player: {\n        ...state.player,\n        lastComment: \"\"\n      }\n    }\n  });\n  roundNumber = 1;\n}\nlet roundNumber = 1;\nfunction combatStep(state, dispatch) {\n  if (!state.inCombat || !state.turnOrder.length) return;\n  const current = state.combatTurn;\n  const currentIndex = state.turnOrder.indexOf(current);\n  const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n  let allMonsters = state.attackSlots.map(slot => slot.monster);\n  console.log('Combat Step - Current:', current === null || current === void 0 ? void 0 : current.name, 'Turn Order:', state.turnOrder.map(t => t.name), 'Active Monsters:', activeMonsters.map(m => m.name + ' HP:' + m.hp));\n  let playerComment = \"\";\n  let enemyComments = allMonsters.map(() => \"\");\n  if (current === state.player) {\n    const target = activeMonsters[0];\n    console.log('Player Turn - Target:', target ? `${target.name} HP:${target.hp}` : 'None');\n    if (target) {\n      if (Math.random() < 0.8) {\n        const newHp = target.hp - 6;\n        target.hp = newHp;\n        playerComment = \"You hit for 6 points!\";\n        enemyComments[0] = target.hp <= 0 ? \"Monster is dead!\" : \"\";\n        if (target.hp <= 0) {\n          calculateTurnOrder(state, dispatch);\n        }\n      } else {\n        playerComment = \"You miss!\";\n      }\n    } else {\n      playerComment = \"No target available!\";\n    }\n  } else if (activeMonsters.includes(current)) {\n    const monsterIndex = allMonsters.indexOf(current);\n    const isFirstLivingMonster = currentIndex === 1 && allMonsters.some(m => m && m.hp <= 0);\n    if (isFirstLivingMonster) {\n      const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n      allMonsters = newAttackSlots.map(slot => slot.monster);\n      dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n          inCombat: true,\n          attackSlots: newAttackSlots\n        }\n      });\n      for (let i = 0; i < newAttackSlots.length; i++) {\n        console.log(`Flicker would apply to combat-enemy-${i + 1}`);\n      }\n    }\n    if (Math.random() < 0.5) {\n      const newHp = state.player.hp - 4;\n      enemyComments[monsterIndex] = \"He hit you for 4 points!\";\n      allMonsters[monsterIndex].lastComment = \"He hit you for 4 points!\";\n      dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n          inCombat: state.inCombat,\n          attackSlots: state.attackSlots,\n          turnOrder: state.turnOrder,\n          combatTurn: state.combatTurn,\n          player: {\n            ...state.player,\n            hp: newHp\n          }\n        }\n      });\n    } else {\n      enemyComments[monsterIndex] = \"He missed you!\";\n      allMonsters[monsterIndex].lastComment = \"He missed you!\";\n    }\n  }\n\n  // Update dialogData using the utility function\n  const dialogData = updateCombatDialogs(playerComment, enemyComments, state.player, allMonsters);\n  console.log('Combat Step - Setting Dialog Data:', dialogData);\n  if (state.player.hp <= 0) {\n    endCombat(state, dispatch);\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: false,\n        attackSlots: [],\n        waitingMonsters: [],\n        turnOrder: [],\n        combatTurn: null,\n        player: {\n          ...state.player,\n          lastComment: \"You have perished!\"\n        },\n        dialogData: updateCombatDialogs(\"You have perished!\", allMonsters.map(() => \"Victory over the human!\"), state.player, allMonsters)\n      }\n    });\n  } else if (activeMonsters.length === 0 && state.waitingMonsters.length === 0) {\n    endCombat(state, dispatch);\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: false,\n        attackSlots: [],\n        waitingMonsters: [],\n        turnOrder: [],\n        combatTurn: null,\n        player: {\n          ...state.player,\n          lastComment: \"Victory is yours!\"\n        },\n        dialogData: updateCombatDialogs(\"Victory is yours!\", [], state.player, [])\n      }\n    });\n  } else {\n    var _state$turnOrder$next;\n    const nextTurnIndex = (currentIndex + 1) % state.turnOrder.length;\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: true,\n        attackSlots: state.attackSlots,\n        turnOrder: state.turnOrder,\n        combatTurn: state.turnOrder[nextTurnIndex],\n        player: {\n          ...state.player,\n          lastComment: playerComment\n        },\n        dialogData: dialogData\n      }\n    });\n    console.log('After Dispatch - inCombat:', state.inCombat, 'Next Turn:', (_state$turnOrder$next = state.turnOrder[nextTurnIndex]) === null || _state$turnOrder$next === void 0 ? void 0 : _state$turnOrder$next.name);\n    moveWaitingMonsters(state, dispatch);\n    if (current === state.turnOrder[state.turnOrder.length - 1]) {\n      resolveRound(state, dispatch);\n      calculateTurnOrder(state, dispatch);\n      roundNumber++;\n    }\n  }\n}\nconst Combat = ({\n  state,\n  dispatch\n}) => {\n  _s();\n  const [combatActive, setCombatActive] = useState(false);\n  useEffect(() => {\n    if (state.inCombat && !combatActive) {\n      var _state$combatTurn;\n      console.log('Combat Started - Initial State:', {\n        combatTurn: (_state$combatTurn = state.combatTurn) === null || _state$combatTurn === void 0 ? void 0 : _state$combatTurn.name,\n        attackSlots: state.attackSlots\n      });\n      setCombatActive(true);\n    }\n  }, [state.inCombat]);\n  const handleNextTurn = () => {\n    console.log('Next Turn Clicked');\n    combatStep(state, dispatch);\n  };\n  const dialogData = {\n    player: {\n      name: state.player.name,\n      hp: state.player.hp,\n      comment: state.player.lastComment || \"\"\n    },\n    enemies: state.attackSlots.map(slot => slot.monster ? {\n      name: slot.monster.name,\n      hp: Math.max(0, slot.monster.hp),\n      comment: slot.monster.lastComment || \"\",\n      dead: slot.monster.hp <= 0\n    } : null)\n  };\n  console.log('Combat Component - inCombat:', state.inCombat, 'Dialog Data:', dialogData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"combat\",\n    children: [/*#__PURE__*/_jsxDEV(Dialog, {\n      data: dialogData.player,\n      index: \"player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), dialogData.enemies.map((enemy, i) => enemy && /*#__PURE__*/_jsxDEV(Dialog, {\n      data: enemy,\n      index: i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNextTurn,\n      children: \"Next Turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n};\n_s(Combat, \"wiBhgT2Tb9GuO9zZXnZimbCQPmI=\");\n_c = Combat;\nexport default Combat;\nvar _c;\n$RefreshReg$(_c, \"Combat\");","map":{"version":3,"names":["React","useEffect","useState","Dialog","updateCombatDialogs","jsxDEV","_jsxDEV","calculateTurnOrder","state","dispatch","combatants","player","attackSlots","map","slot","monster","filter","m","hp","newTurnOrder","c","type","payload","inCombat","turnOrder","combatTurn","resolveRound","activeMonsters","deadMonsters","length","forEach","active","waitingMonsters","nextMonster","shift","x","position","y","newAttackSlots","s","moveWaitingMonsters","allAttackSlotsFull","maxAttackers","some","dx","Math","abs","dy","includes","endCombat","lastComment","roundNumber","combatStep","current","currentIndex","indexOf","allMonsters","console","log","name","t","playerComment","enemyComments","target","random","newHp","monsterIndex","isFirstLivingMonster","i","dialogData","_state$turnOrder$next","nextTurnIndex","Combat","_s","combatActive","setCombatActive","_state$combatTurn","handleNextTurn","comment","enemies","max","dead","className","children","data","index","fileName","_jsxFileName","lineNumber","columnNumber","enemy","onClick","_c","$RefreshReg$"],"sources":["/mnt/devplex/Nightland/nightland/src/components/Combat.js"],"sourcesContent":["// nightland/src/components/Combat.js\nimport React, { useEffect, useState } from 'react';\nimport Dialog from './Dialog';\nimport { updateCombatDialogs } from '../modules/utils'; // Adjust path as needed\n\nfunction calculateTurnOrder(state, dispatch) {\n    const combatants = [state.player, ...state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0)];\n    const newTurnOrder = combatants.filter(c => c.hp > 0);\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: state.inCombat,\n            attackSlots: state.attackSlots,\n            turnOrder: newTurnOrder,\n            combatTurn: newTurnOrder[0]\n        }\n    });\n}\n\nfunction resolveRound(state, dispatch) {\n    const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n    const deadMonsters = state.attackSlots.filter(slot => slot.monster && slot.monster.hp <= 0);\n\n    if (deadMonsters.length > 0) {\n        deadMonsters.forEach(slot => {\n            slot.monster.active = false;\n            if (state.waitingMonsters.length > 0) {\n                const nextMonster = state.waitingMonsters.shift();\n                nextMonster.x = slot.position.x;\n                nextMonster.y = slot.position.y;\n                slot.monster = nextMonster;\n            } else {\n                slot.monster = null;\n            }\n        });\n        const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n        dispatch({ type: 'SET_COMBAT', payload: { inCombat: true, attackSlots: newAttackSlots } });\n    }\n\n    moveWaitingMonsters(state, dispatch);\n    calculateTurnOrder(state, dispatch);\n}\n\nfunction moveWaitingMonsters(state, dispatch) {\n    const activeMonsters = state.activeMonsters.filter(m => m.active && m.hp > 0);\n    const allAttackSlotsFull = state.attackSlots.length >= state.maxAttackers;\n    activeMonsters.forEach(monster => {\n        if (monster.hp > 0 && !state.attackSlots.some(slot => slot.monster === monster)) {\n            const dx = Math.abs(monster.x - state.player.x);\n            const dy = Math.abs(monster.y - state.player.y);\n            if (allAttackSlotsFull && (dx <= 2 || dy <= 2)) {\n                if (!state.waitingMonsters.includes(monster)) {\n                    dispatch({\n                        type: 'UPDATE_WAITING_MONSTERS',\n                        payload: { waitingMonsters: [...state.waitingMonsters, monster] }\n                    });\n                }\n            }\n        }\n    });\n}\n\nfunction endCombat(state, dispatch) {\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: false,\n            attackSlots: [],\n            waitingMonsters: [],\n            turnOrder: [],\n            combatTurn: null,\n            player: { ...state.player, lastComment: \"\" }\n        }\n    });\n    roundNumber = 1;\n}\n\nlet roundNumber = 1;\n\n\n\nfunction combatStep(state, dispatch) {\n    if (!state.inCombat || !state.turnOrder.length) return;\n\n    const current = state.combatTurn;\n    const currentIndex = state.turnOrder.indexOf(current);\n    const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n    let allMonsters = state.attackSlots.map(slot => slot.monster);\n\n    console.log('Combat Step - Current:', current?.name, 'Turn Order:', state.turnOrder.map(t => t.name), 'Active Monsters:', activeMonsters.map(m => m.name + ' HP:' + m.hp));\n\n    let playerComment = \"\";\n    let enemyComments = allMonsters.map(() => \"\");\n\n    if (current === state.player) {\n        const target = activeMonsters[0];\n        console.log('Player Turn - Target:', target ? `${target.name} HP:${target.hp}` : 'None');\n        if (target) {\n            if (Math.random() < 0.8) {\n                const newHp = target.hp - 6;\n                target.hp = newHp;\n                playerComment = \"You hit for 6 points!\";\n                enemyComments[0] = target.hp <= 0 ? \"Monster is dead!\" : \"\";\n                if (target.hp <= 0) {\n                    calculateTurnOrder(state, dispatch);\n                }\n            } else {\n                playerComment = \"You miss!\";\n            }\n        } else {\n            playerComment = \"No target available!\";\n        }\n    } else if (activeMonsters.includes(current)) {\n        const monsterIndex = allMonsters.indexOf(current);\n        const isFirstLivingMonster = currentIndex === 1 && allMonsters.some(m => m && m.hp <= 0);\n        if (isFirstLivingMonster) {\n            const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n            allMonsters = newAttackSlots.map(slot => slot.monster);\n            dispatch({ type: 'SET_COMBAT', payload: { inCombat: true, attackSlots: newAttackSlots } });\n            for (let i = 0; i < newAttackSlots.length; i++) {\n                console.log(`Flicker would apply to combat-enemy-${i + 1}`);\n            }\n        }\n\n        if (Math.random() < 0.5) {\n            const newHp = state.player.hp - 4;\n            enemyComments[monsterIndex] = \"He hit you for 4 points!\";\n            allMonsters[monsterIndex].lastComment = \"He hit you for 4 points!\";\n            dispatch({\n                type: 'SET_COMBAT',\n                payload: {\n                    inCombat: state.inCombat,\n                    attackSlots: state.attackSlots,\n                    turnOrder: state.turnOrder,\n                    combatTurn: state.combatTurn,\n                    player: { ...state.player, hp: newHp }\n                }\n            });\n        } else {\n            enemyComments[monsterIndex] = \"He missed you!\";\n            allMonsters[monsterIndex].lastComment = \"He missed you!\";\n        }\n    }\n\n    // Update dialogData using the utility function\n    const dialogData = updateCombatDialogs(playerComment, enemyComments, state.player, allMonsters);\n    console.log('Combat Step - Setting Dialog Data:', dialogData);\n\n    if (state.player.hp <= 0) {\n        endCombat(state, dispatch);\n        dispatch({\n            type: 'SET_COMBAT',\n            payload: {\n                inCombat: false,\n                attackSlots: [],\n                waitingMonsters: [],\n                turnOrder: [],\n                combatTurn: null,\n                player: { ...state.player, lastComment: \"You have perished!\" },\n                dialogData: updateCombatDialogs(\"You have perished!\", allMonsters.map(() => \"Victory over the human!\"), state.player, allMonsters)\n            }\n        });\n    } else if (activeMonsters.length === 0 && state.waitingMonsters.length === 0) {\n        endCombat(state, dispatch);\n        dispatch({\n            type: 'SET_COMBAT',\n            payload: {\n                inCombat: false,\n                attackSlots: [],\n                waitingMonsters: [],\n                turnOrder: [],\n                combatTurn: null,\n                player: { ...state.player, lastComment: \"Victory is yours!\" },\n                dialogData: updateCombatDialogs(\"Victory is yours!\", [], state.player, [])\n            }\n        });\n    } else {\n        const nextTurnIndex = (currentIndex + 1) % state.turnOrder.length;\n        dispatch({\n            type: 'SET_COMBAT',\n            payload: {\n                inCombat: true,\n                attackSlots: state.attackSlots,\n                turnOrder: state.turnOrder,\n                combatTurn: state.turnOrder[nextTurnIndex],\n                player: { ...state.player, lastComment: playerComment },\n                dialogData: dialogData\n            }\n        });\n        console.log('After Dispatch - inCombat:', state.inCombat, 'Next Turn:', state.turnOrder[nextTurnIndex]?.name);\n        moveWaitingMonsters(state, dispatch);\n\n        if (current === state.turnOrder[state.turnOrder.length - 1]) {\n            resolveRound(state, dispatch);\n            calculateTurnOrder(state, dispatch);\n            roundNumber++;\n        }\n    }\n}\n\n\n\nconst Combat = ({ state, dispatch }) => {\n    const [combatActive, setCombatActive] = useState(false);\n\n    useEffect(() => {\n        if (state.inCombat && !combatActive) {\n            console.log('Combat Started - Initial State:', { combatTurn: state.combatTurn?.name, attackSlots: state.attackSlots });\n            setCombatActive(true);\n        }\n    }, [state.inCombat]);\n\n    const handleNextTurn = () => {\n        console.log('Next Turn Clicked');\n        combatStep(state, dispatch);\n    };\n\n    const dialogData = {\n        player: { name: state.player.name, hp: state.player.hp, comment: state.player.lastComment || \"\" },\n        enemies: state.attackSlots.map(slot => slot.monster ? { name: slot.monster.name, hp: Math.max(0, slot.monster.hp), comment: slot.monster.lastComment || \"\", dead: slot.monster.hp <= 0 } : null)\n    };\n    console.log('Combat Component - inCombat:', state.inCombat, 'Dialog Data:', dialogData);\n\n    return (\n        <div className=\"combat\">\n            <Dialog data={dialogData.player} index=\"player\" />\n            {dialogData.enemies.map((enemy, i) => enemy && (\n                <Dialog key={i} data={enemy} index={i} />\n            ))}\n            <button onClick={handleNextTurn}>Next Turn</button>\n        </div>\n    );\n};\n\nexport default Combat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}