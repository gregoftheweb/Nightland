{"ast":null,"code":"var _jsxFileName = \"/mnt/devplex/Nightland/nightland/src/App.js\",\n  _s = $RefreshSig$();\n// nightland/src/App.js\nimport React, { useReducer, useState, useEffect, useCallback, useRef } from 'react';\nimport { initialState, reducer } from './modules/gameState';\nimport SplashScreen from './components/SplashScreen';\nimport PrincessScreen from './components/PrincessScreen';\nimport StatusBar from './components/StatusBar';\nimport CombatUI from './components/CombatUI';\nimport GameDialog from './components/GameDialog';\nimport { handleMovePlayer, handleCombatStep } from './modules/gameLoop';\nimport './styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [phase, setPhase] = useState('splash');\n  const [showSettings, setShowSettings] = useState(false);\n  const [dialogMessage, setDialogMessage] = useState('');\n  const gameContainerRef = useRef(null);\n  const lastTranslateYRef = useRef(null);\n  console.log('App State:', state); // Log state to check positions\n\n  const handleStartGame = () => setPhase('princess');\n  const handlePrincessNext = () => setPhase('gameplay');\n  const toggleSettings = e => {\n    e.stopPropagation();\n    setShowSettings(!showSettings);\n  };\n  const showDialog = useCallback((message, duration = 3600) => {\n    setDialogMessage(message);\n    setTimeout(() => setDialogMessage(''), duration);\n  }, []);\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (phase === 'gameplay') {\n        event.preventDefault();\n        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n          console.log('Moving player with key:', event.key); // Log movement\n          handleMovePlayer(state, dispatch, event.key, showDialog);\n        } else if (event.key === ' ' && state.inCombat) {\n          console.log('Combat step triggered'); // Log combat\n          handleCombatStep(state, dispatch, showDialog);\n        }\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [state, phase, showDialog]);\n  useEffect(() => {\n    if (phase === 'gameplay') {\n      console.log('Gameplay phase mounted, updating player, redoubt, and game board position');\n      const player = document.querySelector('#player');\n      const redoubt = document.querySelector('#redoubt');\n      const gameBoard = document.querySelector('.game-board');\n      if (player && state.player.position && gameBoard) {\n        console.log('Setting player position:', state.player.position);\n        player.style.left = `${state.player.position.x}px`;\n        player.style.top = `${state.player.position.y}px`;\n        player.style.transform = 'none';\n        player.style.visibility = 'visible';\n        player.style.opacity = '1';\n        const viewportWidth = window.innerWidth;\n        const viewportHeight = window.innerHeight;\n        const statusBarHeight = 42; // Height of status bar, adjusted to match total rendered height\n        const playerX = state.player.position.x;\n        const playerY = state.player.position.y;\n        const edgeDistance = 100; // Distance from edges (top, bottom, left, right) to trigger scrolling\n        const maxX = 1960; // Maximum x position on 2000x2000 game board (2000 - 40 for player width)\n        const maxY = 1960; // Maximum y position on 2000x2000 game board (2000 - 40 for player height)\n        const middleY = viewportHeight / 2; // Middle of the viewport\n\n        let translateX, translateY;\n\n        // Initial positioning: align redoubt's bottom with top of status bar (shift up by statusBarHeight)\n        translateX = -playerX + viewportWidth / 2 - 40 / 2; // Center player horizontally\n        translateY = -(state.redoubt.position.y + 160 - viewportHeight + statusBarHeight); // Align redoubt bottom with top of status bar (1840 + 160 - viewportHeight + 42)\n\n        // Calculate player's position in the viewport after initial translation\n        let playerViewportY = playerY + translateY; // Player's y position in viewport after initial translation\n\n        // Check if player has reached the middle of the viewport vertically\n        if (playerViewportY < middleY) {\n          // Player is above middle: scroll to keep player centered vertically\n          const targetTranslateY = -playerY + viewportHeight / 2 - 40 / 2; // Desired translateY to center player\n          // Ensure smooth transition by adjusting translateY incrementally\n          const lastTranslateY = lastTranslateYRef.current;\n          if (lastTranslateY !== null) {\n            // Calculate the expected change in translateY based on player's movement\n            const deltaY = lastTranslateY - translateY; // Change in translateY from last step\n            const expectedDeltaY = 40; // Player moves 40px per step, translateY should change by -40px per step upward\n            if (playerY < state.player.position.y) {\n              // Moving up\n              // Ensure translateY increases by 40px (scrolls upward) to match player's 40px upward move\n              translateY = lastTranslateY + expectedDeltaY;\n            } else {\n              translateY = targetTranslateY;\n            }\n          } else {\n            translateY = targetTranslateY;\n          }\n          playerViewportY = viewportHeight / 2; // Player is now centered\n        }\n\n        // Prevent scrolling past top or bottom of game board\n        if (playerY < edgeDistance) {\n          // Player is near top edge: adjust translation to keep player at edgeDistance from top\n          translateY = -playerY + edgeDistance;\n        } else if (playerY > maxY - edgeDistance) {\n          // Player is near bottom edge: adjust translation to keep player at edgeDistance from bottom\n          translateY = -(playerY - (viewportHeight - statusBarHeight - edgeDistance));\n        }\n\n        // Horizontal scrolling if player is within edgeDistance of left or right edges\n        if (playerX < edgeDistance) {\n          // Player is near left edge: adjust translation to keep player at edgeDistance from left\n          translateX = -playerX + edgeDistance;\n        } else if (playerX > maxX - edgeDistance) {\n          // Player is near right edge: adjust translation to keep player at edgeDistance from right\n          translateX = -(playerX - (viewportWidth - edgeDistance));\n        }\n\n        // Store the current translateY for the next iteration\n        lastTranslateYRef.current = translateY;\n\n        // Apply transform to game board\n        gameBoard.style.transform = `translate(${translateX}px, ${translateY}px)`;\n        gameBoard.style.transition = 'transform 0.2s ease'; // Smooth transition for movement\n\n        // Position redoubt (fixed or scrolling with game board)\n        if (redoubt && state.redoubt.position) {\n          redoubt.style.left = `${state.redoubt.position.x}px`;\n          redoubt.style.top = `${state.redoubt.position.y}px`;\n          redoubt.style.transform = 'none';\n          redoubt.style.visibility = 'visible';\n          redoubt.style.opacity = '1';\n        }\n      }\n    }\n  }, [phase, state.player.position, state.redoubt.position]); // Re-run when positions change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [phase === 'splash' && /*#__PURE__*/_jsxDEV(SplashScreen, {\n      onStart: handleStartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 36\n    }, this), phase === 'princess' && /*#__PURE__*/_jsxDEV(PrincessScreen, {\n      onNext: handlePrincessNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 38\n    }, this), phase === 'gameplay' && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gameplay-screen\",\n      ref: gameContainerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"player\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"redoubt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(StatusBar, {\n        hp: state.player.hp,\n        onSettingsToggle: toggleSettings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this), state.inCombat && /*#__PURE__*/_jsxDEV(CombatUI, {\n        state: state,\n        dispatch: dispatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(GameDialog, {\n      message: dialogMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"background-audio\",\n      loop: true,\n      autoPlay: true,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"/assets/sounds/ambient-background.wav\",\n        type: \"audio/wav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"S6TCOowR0bLcOt/xLWBFV0EP/T0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useReducer","useState","useEffect","useCallback","useRef","initialState","reducer","SplashScreen","PrincessScreen","StatusBar","CombatUI","GameDialog","handleMovePlayer","handleCombatStep","jsxDEV","_jsxDEV","App","_s","state","dispatch","phase","setPhase","showSettings","setShowSettings","dialogMessage","setDialogMessage","gameContainerRef","lastTranslateYRef","console","log","handleStartGame","handlePrincessNext","toggleSettings","e","stopPropagation","showDialog","message","duration","setTimeout","handleKeyDown","event","preventDefault","includes","key","inCombat","document","addEventListener","removeEventListener","player","querySelector","redoubt","gameBoard","position","style","left","x","top","y","transform","visibility","opacity","viewportWidth","window","innerWidth","viewportHeight","innerHeight","statusBarHeight","playerX","playerY","edgeDistance","maxX","maxY","middleY","translateX","translateY","playerViewportY","targetTranslateY","lastTranslateY","current","deltaY","expectedDeltaY","transition","className","children","onStart","fileName","_jsxFileName","lineNumber","columnNumber","onNext","id","ref","hp","onSettingsToggle","loop","autoPlay","src","type","_c","$RefreshReg$"],"sources":["/mnt/devplex/Nightland/nightland/src/App.js"],"sourcesContent":["// nightland/src/App.js\nimport React, { useReducer, useState, useEffect, useCallback, useRef } from 'react';\nimport { initialState, reducer } from './modules/gameState';\nimport SplashScreen from './components/SplashScreen';\nimport PrincessScreen from './components/PrincessScreen';\nimport StatusBar from './components/StatusBar';\nimport CombatUI from './components/CombatUI';\nimport GameDialog from './components/GameDialog';\nimport { handleMovePlayer, handleCombatStep } from './modules/gameLoop';\nimport './styles/styles.css';\n\nconst App = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const [phase, setPhase] = useState('splash');\n    const [showSettings, setShowSettings] = useState(false);\n    const [dialogMessage, setDialogMessage] = useState('');\n    const gameContainerRef = useRef(null);\n    const lastTranslateYRef = useRef(null);\n\n    console.log('App State:', state); // Log state to check positions\n\n    const handleStartGame = () => setPhase('princess');\n    const handlePrincessNext = () => setPhase('gameplay');\n    const toggleSettings = (e) => {\n        e.stopPropagation();\n        setShowSettings(!showSettings);\n    };\n\n    const showDialog = useCallback((message, duration = 3600) => {\n        setDialogMessage(message);\n        setTimeout(() => setDialogMessage(''), duration);\n    }, []);\n\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (phase === 'gameplay') {\n                event.preventDefault();\n                if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n                    console.log('Moving player with key:', event.key); // Log movement\n                    handleMovePlayer(state, dispatch, event.key, showDialog);\n                } else if (event.key === ' ' && state.inCombat) {\n                    console.log('Combat step triggered'); // Log combat\n                    handleCombatStep(state, dispatch, showDialog);\n                }\n            }\n        };\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [state, phase, showDialog]);\n\n\n\n    useEffect(() => {\n        if (phase === 'gameplay') {\n          console.log('Gameplay phase mounted, updating player, redoubt, and game board position');\n          const player = document.querySelector('#player');\n          const redoubt = document.querySelector('#redoubt');\n          const gameBoard = document.querySelector('.game-board');\n          if (player && state.player.position && gameBoard) {\n            console.log('Setting player position:', state.player.position);\n            player.style.left = `${state.player.position.x}px`;\n            player.style.top = `${state.player.position.y}px`;\n            player.style.transform = 'none';\n            player.style.visibility = 'visible';\n            player.style.opacity = '1';\n    \n            const viewportWidth = window.innerWidth;\n            const viewportHeight = window.innerHeight;\n            const statusBarHeight = 42; // Height of status bar, adjusted to match total rendered height\n            const playerX = state.player.position.x;\n            const playerY = state.player.position.y;\n            const edgeDistance = 100; // Distance from edges (top, bottom, left, right) to trigger scrolling\n            const maxX = 1960; // Maximum x position on 2000x2000 game board (2000 - 40 for player width)\n            const maxY = 1960; // Maximum y position on 2000x2000 game board (2000 - 40 for player height)\n            const middleY = viewportHeight / 2; // Middle of the viewport\n    \n            let translateX, translateY;\n    \n            // Initial positioning: align redoubt's bottom with top of status bar (shift up by statusBarHeight)\n            translateX = -playerX + (viewportWidth / 2) - (40 / 2); // Center player horizontally\n            translateY = -(state.redoubt.position.y + 160 - viewportHeight + statusBarHeight); // Align redoubt bottom with top of status bar (1840 + 160 - viewportHeight + 42)\n    \n            // Calculate player's position in the viewport after initial translation\n            let playerViewportY = playerY + translateY; // Player's y position in viewport after initial translation\n    \n            // Check if player has reached the middle of the viewport vertically\n            if (playerViewportY < middleY) {\n              // Player is above middle: scroll to keep player centered vertically\n              const targetTranslateY = -playerY + (viewportHeight / 2) - (40 / 2); // Desired translateY to center player\n              // Ensure smooth transition by adjusting translateY incrementally\n              const lastTranslateY = lastTranslateYRef.current;\n              if (lastTranslateY !== null) {\n                // Calculate the expected change in translateY based on player's movement\n                const deltaY = lastTranslateY - translateY; // Change in translateY from last step\n                const expectedDeltaY = 40; // Player moves 40px per step, translateY should change by -40px per step upward\n                if (playerY < state.player.position.y) { // Moving up\n                  // Ensure translateY increases by 40px (scrolls upward) to match player's 40px upward move\n                  translateY = lastTranslateY + expectedDeltaY;\n                } else {\n                  translateY = targetTranslateY;\n                }\n              } else {\n                translateY = targetTranslateY;\n              }\n              playerViewportY = viewportHeight / 2; // Player is now centered\n            }\n    \n            // Prevent scrolling past top or bottom of game board\n            if (playerY < edgeDistance) {\n              // Player is near top edge: adjust translation to keep player at edgeDistance from top\n              translateY = -playerY + edgeDistance;\n            } else if (playerY > maxY - edgeDistance) {\n              // Player is near bottom edge: adjust translation to keep player at edgeDistance from bottom\n              translateY = -(playerY - (viewportHeight - statusBarHeight - edgeDistance));\n            }\n    \n            // Horizontal scrolling if player is within edgeDistance of left or right edges\n            if (playerX < edgeDistance) {\n              // Player is near left edge: adjust translation to keep player at edgeDistance from left\n              translateX = -playerX + edgeDistance;\n            } else if (playerX > maxX - edgeDistance) {\n              // Player is near right edge: adjust translation to keep player at edgeDistance from right\n              translateX = -(playerX - (viewportWidth - edgeDistance));\n            }\n    \n            // Store the current translateY for the next iteration\n            lastTranslateYRef.current = translateY;\n    \n            // Apply transform to game board\n            gameBoard.style.transform = `translate(${translateX}px, ${translateY}px)`;\n            gameBoard.style.transition = 'transform 0.2s ease'; // Smooth transition for movement\n    \n            // Position redoubt (fixed or scrolling with game board)\n            if (redoubt && state.redoubt.position) {\n              redoubt.style.left = `${state.redoubt.position.x}px`;\n              redoubt.style.top = `${state.redoubt.position.y}px`;\n              redoubt.style.transform = 'none';\n              redoubt.style.visibility = 'visible';\n              redoubt.style.opacity = '1';\n            }\n          }\n        }\n      }, [phase, state.player.position, state.redoubt.position]); // Re-run when positions change\n\n\n\n    return (\n        <div className=\"app\">\n            {phase === 'splash' && <SplashScreen onStart={handleStartGame} />}\n            {phase === 'princess' && <PrincessScreen onNext={handlePrincessNext} />}\n            {phase === 'gameplay' && (\n                <div id=\"gameplay-screen\" ref={gameContainerRef}>\n                    <div className=\"game-board\">\n                        <div id=\"player\" />\n                        <div id=\"redoubt\" />\n                    </div>\n                    <StatusBar hp={state.player.hp} onSettingsToggle={toggleSettings} />\n                    {state.inCombat && <CombatUI state={state} dispatch={dispatch} />}\n                </div>\n            )}\n            <GameDialog message={dialogMessage} />\n            <audio id=\"background-audio\" loop autoPlay>\n                <source src=\"/assets/sounds/ambient-background.wav\" type=\"audio/wav\" />\n            </audio>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}