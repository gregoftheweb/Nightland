{"ast":null,"code":"var _jsxFileName = \"/mnt/devplex/Nightland/nightland/src/App.js\",\n  _s = $RefreshSig$();\n// nightland/src/App.js\nimport React, { useReducer, useState, useEffect, useCallback, useRef } from 'react';\nimport { initialState, reducer } from './modules/gameState';\nimport SplashScreen from './components/SplashScreen';\nimport PrincessScreen from './components/PrincessScreen';\nimport StatusBar from './components/StatusBar';\nimport CombatUI from './components/CombatUI';\nimport GameDialog from './components/GameDialog';\nimport { handleCombatStep } from './modules/gameLoop';\nimport { initializePositions, handleMovePlayer } from './modules/movement';\nimport { setupEventListeners } from './modules/events';\nimport './styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [phase, setPhase] = useState('splash');\n  const [showSettings, setShowSettings] = useState(false);\n  const [dialogMessage, setDialogMessage] = useState('');\n  const gameContainerRef = useRef(null);\n  const lastTranslateYRef = useRef(null);\n  const isScrollingRef = useRef(false); // Track if we're in scrolling mode\n\n  console.log('App State:', state); // Log state to check positions\n\n  const handleStartGame = () => setPhase('princess');\n  const handlePrincessNext = () => setPhase('gameplay');\n  const toggleSettings = e => {\n    e.stopPropagation();\n    setShowSettings(!showSettings);\n  };\n  const showDialog = useCallback((message, duration = 3600) => {\n    setDialogMessage(message);\n    setTimeout(() => setDialogMessage(''), duration);\n  }, []);\n  const handleKeyDown = event => {\n    if (phase === 'gameplay') {\n      console.log('Moving player with key:', event.key);\n      handleMovePlayer(state, dispatch, event.key, showDialog);\n    }\n  };\n  useEffect(() => {\n    if (phase === 'gameplay') {\n      initializePositions(state);\n    }\n  }, [phase, state.player.position, state.redoubt.position]);\n  useEffect(() => {\n    // Setup event listeners when the component mounts\n    const movePlayer = key => handleMovePlayer(state, dispatch, key, showDialog);\n    setupEventListeners(audio,\n    // Assuming audio is a state or prop\n    statusBar,\n    // Assuming statusBar is a ref or element\n    gameContainer,\n    // Assuming gameContainer is a ref or element\n    renderMap,\n    // Assuming renderMap is a function\n    movePlayer, combatStep,\n    // Assuming combatStep is a function\n    showPrincessScreen,\n    // Assuming showPrincessScreen is a function\n    startGame,\n    // Assuming startGame is a function\n    showInfoBox,\n    // Assuming showInfoBox is a function\n    toggleSettings,\n    // Assuming toggleSettings is a function\n    toggleSFX // Assuming toggleSFX is a function\n    );\n\n    // Cleanup (optional, if needed for other listeners)\n    return () => {\n      // Add cleanup if other listeners are added in the future\n    };\n  }, [state, dispatch, showDialog, audio, statusBar, gameContainer, renderMap, combatStep, showPrincessScreen, startGame, showInfoBox, toggleSettings, toggleSFX]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [phase === 'splash' && /*#__PURE__*/_jsxDEV(SplashScreen, {\n      onStart: handleStartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 36\n    }, this), phase === 'princess' && /*#__PURE__*/_jsxDEV(PrincessScreen, {\n      onNext: handlePrincessNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 38\n    }, this), phase === 'gameplay' && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gameplay-screen\",\n      ref: gameContainerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"player\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"redoubt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(StatusBar, {\n        hp: state.player.hp,\n        onSettingsToggle: toggleSettings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), state.inCombat && /*#__PURE__*/_jsxDEV(CombatUI, {\n        state: state,\n        dispatch: dispatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(GameDialog, {\n      message: dialogMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"background-audio\",\n      loop: true,\n      autoPlay: true,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"/assets/sounds/ambient-background.wav\",\n        type: \"audio/wav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"kvpKDnqrrWj3AtQEi8/QJPZr6Rc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useReducer","useState","useEffect","useCallback","useRef","initialState","reducer","SplashScreen","PrincessScreen","StatusBar","CombatUI","GameDialog","handleCombatStep","initializePositions","handleMovePlayer","setupEventListeners","jsxDEV","_jsxDEV","App","_s","state","dispatch","phase","setPhase","showSettings","setShowSettings","dialogMessage","setDialogMessage","gameContainerRef","lastTranslateYRef","isScrollingRef","console","log","handleStartGame","handlePrincessNext","toggleSettings","e","stopPropagation","showDialog","message","duration","setTimeout","handleKeyDown","event","key","player","position","redoubt","movePlayer","audio","statusBar","gameContainer","renderMap","combatStep","showPrincessScreen","startGame","showInfoBox","toggleSFX","className","children","onStart","fileName","_jsxFileName","lineNumber","columnNumber","onNext","id","ref","hp","onSettingsToggle","inCombat","loop","autoPlay","src","type","_c","$RefreshReg$"],"sources":["/mnt/devplex/Nightland/nightland/src/App.js"],"sourcesContent":["// nightland/src/App.js\nimport React, { useReducer, useState, useEffect, useCallback, useRef } from 'react';\nimport { initialState, reducer } from './modules/gameState';\nimport SplashScreen from './components/SplashScreen';\nimport PrincessScreen from './components/PrincessScreen';\nimport StatusBar from './components/StatusBar';\nimport CombatUI from './components/CombatUI';\nimport GameDialog from './components/GameDialog';\nimport { handleCombatStep } from './modules/gameLoop';\nimport { initializePositions, handleMovePlayer } from './modules/movement';\nimport { setupEventListeners } from './modules/events';\nimport './styles/styles.css';\n\nconst App = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const [phase, setPhase] = useState('splash');\n    const [showSettings, setShowSettings] = useState(false);\n    const [dialogMessage, setDialogMessage] = useState('');\n    const gameContainerRef = useRef(null);\n    const lastTranslateYRef = useRef(null);\n    const isScrollingRef = useRef(false); // Track if we're in scrolling mode\n\n    console.log('App State:', state); // Log state to check positions\n\n    const handleStartGame = () => setPhase('princess');\n    const handlePrincessNext = () => setPhase('gameplay');\n    const toggleSettings = (e) => {\n        e.stopPropagation();\n        setShowSettings(!showSettings);\n    };\n\n    const showDialog = useCallback((message, duration = 3600) => {\n        setDialogMessage(message);\n        setTimeout(() => setDialogMessage(''), duration);\n    }, []);\n\n\n    const handleKeyDown = (event) => {\n      if (phase === 'gameplay') {\n        console.log('Moving player with key:', event.key);\n        handleMovePlayer(state, dispatch, event.key, showDialog);\n      }\n    };\n\n    \n    useEffect(() => {\n      if (phase === 'gameplay') {\n        initializePositions(state);\n      }\n    }, [phase, state.player.position, state.redoubt.position]);\n    \nuseEffect(() => {\n    // Setup event listeners when the component mounts\n    const movePlayer = (key) => handleMovePlayer(state, dispatch, key, showDialog);\n    setupEventListeners(\n      audio, // Assuming audio is a state or prop\n      statusBar, // Assuming statusBar is a ref or element\n      gameContainer, // Assuming gameContainer is a ref or element\n      renderMap, // Assuming renderMap is a function\n      movePlayer,\n      combatStep, // Assuming combatStep is a function\n      showPrincessScreen, // Assuming showPrincessScreen is a function\n      startGame, // Assuming startGame is a function\n      showInfoBox, // Assuming showInfoBox is a function\n      toggleSettings, // Assuming toggleSettings is a function\n      toggleSFX // Assuming toggleSFX is a function\n    );\n\n    // Cleanup (optional, if needed for other listeners)\n    return () => {\n      // Add cleanup if other listeners are added in the future\n    };\n  }, [state, dispatch, showDialog, audio, statusBar, gameContainer, renderMap, combatStep, showPrincessScreen, startGame, showInfoBox, toggleSettings, toggleSFX]);\n\n    return (\n        <div className=\"app\">\n            {phase === 'splash' && <SplashScreen onStart={handleStartGame} />}\n            {phase === 'princess' && <PrincessScreen onNext={handlePrincessNext} />}\n            {phase === 'gameplay' && (\n                <div id=\"gameplay-screen\" ref={gameContainerRef}>\n                    <div className=\"game-board\">\n                        <div id=\"player\" />\n                        <div id=\"redoubt\" />\n                    </div>\n                    <StatusBar hp={state.player.hp} onSettingsToggle={toggleSettings} />\n                    {state.inCombat && <CombatUI state={state} dispatch={dispatch} />}\n                </div>\n            )}\n            <GameDialog message={dialogMessage} />\n            <audio id=\"background-audio\" loop autoPlay>\n                <source src=\"/assets/sounds/ambient-background.wav\" type=\"audio/wav\" />\n            </audio>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}