{"ast":null,"code":"var _jsxFileName = \"/mnt/devplex/Nightland/nightland/src/components/Combat.js\",\n  _s = $RefreshSig$();\n// nightland/src/components/Combat.js\nimport React, { useEffect, useState } from 'react';\nimport Dialog from './Dialog';\nimport { updateCombatDialogs } from '../modules/utils'; // Adjust path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction calculateTurnOrder(state, dispatch) {\n  const combatants = [state.player, ...state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0)];\n  const newTurnOrder = combatants.filter(c => c.hp > 0);\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: state.inCombat,\n      attackSlots: state.attackSlots,\n      turnOrder: newTurnOrder,\n      combatTurn: newTurnOrder[0],\n      player: state.player,\n      dialogData: state.dialogData // Preserve\n    }\n  });\n}\nfunction resolveRound(state, dispatch) {\n  const deadMonsters = state.attackSlots.filter(slot => slot.monster && slot.monster.hp <= 0);\n  if (deadMonsters.length > 0) {\n    deadMonsters.forEach(slot => {\n      slot.monster.active = false;\n      if (state.waitingMonsters.length > 0) {\n        const nextMonster = state.waitingMonsters.shift();\n        nextMonster.x = slot.position.x;\n        nextMonster.y = slot.position.y;\n        slot.monster = nextMonster;\n      } else {\n        slot.monster = null;\n      }\n    });\n    const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: true,\n        attackSlots: newAttackSlots,\n        dialogData: state.dialogData // Preserve\n      }\n    });\n  }\n}\nfunction moveWaitingMonsters(state, dispatch) {\n  const activeMonsters = state.activeMonsters.filter(m => m.active && m.hp > 0);\n  const allAttackSlotsFull = state.attackSlots.length >= state.maxAttackers;\n  activeMonsters.forEach(monster => {\n    if (monster.hp > 0 && !state.attackSlots.some(slot => slot.monster === monster)) {\n      const dx = Math.abs(monster.x - state.player.x);\n      const dy = Math.abs(monster.y - state.player.y);\n      if (allAttackSlotsFull && (dx <= 2 || dy <= 2)) {\n        if (!state.waitingMonsters.includes(monster)) {\n          dispatch({\n            type: 'UPDATE_WAITING_MONSTERS',\n            payload: {\n              waitingMonsters: [...state.waitingMonsters, monster]\n            }\n          });\n        }\n      }\n    }\n  });\n}\nfunction endCombat(state, dispatch) {\n  dispatch({\n    type: 'SET_COMBAT',\n    payload: {\n      inCombat: false,\n      attackSlots: [],\n      waitingMonsters: [],\n      turnOrder: [],\n      combatTurn: null,\n      player: {\n        ...state.player,\n        lastComment: \"\"\n      },\n      dialogData: updateCombatDialogs(\"\", [], state.player, [])\n    }\n  });\n  roundNumber = 1;\n}\nlet roundNumber = 1;\nfunction combatStep(state, dispatch) {\n  var _state$dialogData, _state$dialogData$pla;\n  if (!state.inCombat || !state.turnOrder.length) return;\n  const current = state.combatTurn;\n  const currentIndex = state.turnOrder.indexOf(current);\n  const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n  let allMonsters = state.attackSlots.map(slot => slot.monster);\n  console.log('Combat Step - Current:', current === null || current === void 0 ? void 0 : current.name, 'Turn Order:', state.turnOrder.map(t => t.name), 'Active Monsters:', activeMonsters.map(m => m.name + ' HP:' + m.hp));\n  let playerComment = ((_state$dialogData = state.dialogData) === null || _state$dialogData === void 0 ? void 0 : (_state$dialogData$pla = _state$dialogData.player) === null || _state$dialogData$pla === void 0 ? void 0 : _state$dialogData$pla.comment) || \"\";\n  let enemyComments = allMonsters.map(() => \"\");\n  let updatedPlayer = {\n    ...state.player\n  };\n  let updatedAttackSlots = [...state.attackSlots];\n  if (current === state.player) {\n    const target = activeMonsters[0];\n    console.log('Player Turn - Target:', target ? `${target.name} HP:${target.hp}` : 'None');\n    if (target) {\n      if (Math.random() < 0.8) {\n        target.hp -= 6;\n        playerComment = \"You hit for 6 points!\";\n        enemyComments[0] = target.hp <= 0 ? \"Monster is dead!\" : \"\";\n      } else {\n        playerComment = \"You miss!\";\n      }\n    } else {\n      playerComment = \"No target available!\";\n    }\n  } else if (activeMonsters.includes(current)) {\n    const monsterIndex = allMonsters.indexOf(current);\n    if (Math.random() < 0.5) {\n      updatedPlayer.hp -= 4;\n      enemyComments[monsterIndex] = \"He hit you for 4 points!\";\n      allMonsters[monsterIndex].lastComment = \"He hit you for 4 points!\";\n    } else {\n      enemyComments[monsterIndex] = \"He missed you!\";\n      allMonsters[monsterIndex].lastComment = \"He missed you!\";\n    }\n  }\n  const dialogData = updateCombatDialogs(playerComment, enemyComments, updatedPlayer, allMonsters);\n  console.log('Combat Step - Player Comment Before Update:', playerComment);\n  console.log('Combat Step - Setting Dialog Data:', dialogData);\n  const nextTurnIndex = (currentIndex + 1) % state.turnOrder.length;\n  const nextTurn = state.turnOrder[nextTurnIndex];\n  if (updatedPlayer.hp <= 0) {\n    endCombat(state, dispatch);\n  } else if (activeMonsters.length === 0 && state.waitingMonsters.length === 0) {\n    endCombat(state, dispatch);\n  } else {\n    if (current === state.turnOrder[state.turnOrder.length - 1]) {\n      resolveRound(state, dispatch); // Updates attackSlots and turnOrder\n      updatedAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n      calculateTurnOrder(state, dispatch); // Recalculates turnOrder\n      roundNumber++;\n    }\n    dispatch({\n      type: 'SET_COMBAT',\n      payload: {\n        inCombat: true,\n        attackSlots: updatedAttackSlots,\n        turnOrder: state.turnOrder,\n        combatTurn: nextTurn,\n        player: {\n          ...updatedPlayer,\n          lastComment: playerComment\n        },\n        dialogData: dialogData\n      }\n    });\n    console.log('After Dispatch - inCombat:', state.inCombat, 'Next Turn:', nextTurn === null || nextTurn === void 0 ? void 0 : nextTurn.name);\n    moveWaitingMonsters(state, dispatch);\n  }\n}\nconst Combat = ({\n  state,\n  dispatch\n}) => {\n  _s();\n  var _state$dialogData2, _state$dialogData3, _state$dialogData3$en, _state$dialogData4, _state$dialogData4$pl;\n  const [combatActive, setCombatActive] = useState(false);\n  useEffect(() => {\n    if (state.inCombat && !combatActive) {\n      var _state$combatTurn;\n      console.log('Combat Started - Initial State:', {\n        combatTurn: (_state$combatTurn = state.combatTurn) === null || _state$combatTurn === void 0 ? void 0 : _state$combatTurn.name,\n        attackSlots: state.attackSlots\n      });\n      setCombatActive(true);\n    }\n  }, [state.inCombat]);\n  const handleNextTurn = () => {\n    console.log('Next Turn Clicked');\n    combatStep(state, dispatch);\n  };\n  console.log('Combat Component - inCombat:', state.inCombat, 'Dialog Data:', state.dialogData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"combat\",\n    children: [/*#__PURE__*/_jsxDEV(Dialog, {\n      data: ((_state$dialogData2 = state.dialogData) === null || _state$dialogData2 === void 0 ? void 0 : _state$dialogData2.player) || {\n        name: state.player.name,\n        hp: state.player.hp,\n        comment: ''\n      },\n      index: \"player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), (_state$dialogData3 = state.dialogData) === null || _state$dialogData3 === void 0 ? void 0 : (_state$dialogData3$en = _state$dialogData3.enemies) === null || _state$dialogData3$en === void 0 ? void 0 : _state$dialogData3$en.map((enemy, i) => enemy && /*#__PURE__*/_jsxDEV(Dialog, {\n      data: enemy,\n      index: i\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        fontSize: '20px'\n      },\n      children: [\"Raw Player Comment: \", ((_state$dialogData4 = state.dialogData) === null || _state$dialogData4 === void 0 ? void 0 : (_state$dialogData4$pl = _state$dialogData4.player) === null || _state$dialogData4$pl === void 0 ? void 0 : _state$dialogData4$pl.comment) || 'No comment yet']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNextTurn,\n      children: \"Next Turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n};\n_s(Combat, \"wiBhgT2Tb9GuO9zZXnZimbCQPmI=\");\n_c = Combat;\nexport default Combat;\nvar _c;\n$RefreshReg$(_c, \"Combat\");","map":{"version":3,"names":["React","useEffect","useState","Dialog","updateCombatDialogs","jsxDEV","_jsxDEV","calculateTurnOrder","state","dispatch","combatants","player","attackSlots","map","slot","monster","filter","m","hp","newTurnOrder","c","type","payload","inCombat","turnOrder","combatTurn","dialogData","resolveRound","deadMonsters","length","forEach","active","waitingMonsters","nextMonster","shift","x","position","y","newAttackSlots","s","moveWaitingMonsters","activeMonsters","allAttackSlotsFull","maxAttackers","some","dx","Math","abs","dy","includes","endCombat","lastComment","roundNumber","combatStep","_state$dialogData","_state$dialogData$pla","current","currentIndex","indexOf","allMonsters","console","log","name","t","playerComment","comment","enemyComments","updatedPlayer","updatedAttackSlots","target","random","monsterIndex","nextTurnIndex","nextTurn","Combat","_s","_state$dialogData2","_state$dialogData3","_state$dialogData3$en","_state$dialogData4","_state$dialogData4$pl","combatActive","setCombatActive","_state$combatTurn","handleNextTurn","className","children","data","index","fileName","_jsxFileName","lineNumber","columnNumber","enemies","enemy","i","style","color","fontSize","onClick","_c","$RefreshReg$"],"sources":["/mnt/devplex/Nightland/nightland/src/components/Combat.js"],"sourcesContent":["// nightland/src/components/Combat.js\nimport React, { useEffect, useState } from 'react';\nimport Dialog from './Dialog';\nimport { updateCombatDialogs } from '../modules/utils'; // Adjust path as needed\n\nfunction calculateTurnOrder(state, dispatch) {\n    const combatants = [state.player, ...state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0)];\n    const newTurnOrder = combatants.filter(c => c.hp > 0);\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: state.inCombat,\n            attackSlots: state.attackSlots,\n            turnOrder: newTurnOrder,\n            combatTurn: newTurnOrder[0],\n            player: state.player,\n            dialogData: state.dialogData // Preserve\n        }\n    });\n}\n\nfunction resolveRound(state, dispatch) {\n    const deadMonsters = state.attackSlots.filter(slot => slot.monster && slot.monster.hp <= 0);\n    if (deadMonsters.length > 0) {\n        deadMonsters.forEach(slot => {\n            slot.monster.active = false;\n            if (state.waitingMonsters.length > 0) {\n                const nextMonster = state.waitingMonsters.shift();\n                nextMonster.x = slot.position.x;\n                nextMonster.y = slot.position.y;\n                slot.monster = nextMonster;\n            } else {\n                slot.monster = null;\n            }\n        });\n        const newAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n        dispatch({\n            type: 'SET_COMBAT',\n            payload: {\n                inCombat: true,\n                attackSlots: newAttackSlots,\n                dialogData: state.dialogData // Preserve\n            }\n        });\n    }\n}\n\nfunction moveWaitingMonsters(state, dispatch) {\n    const activeMonsters = state.activeMonsters.filter(m => m.active && m.hp > 0);\n    const allAttackSlotsFull = state.attackSlots.length >= state.maxAttackers;\n    activeMonsters.forEach(monster => {\n        if (monster.hp > 0 && !state.attackSlots.some(slot => slot.monster === monster)) {\n            const dx = Math.abs(monster.x - state.player.x);\n            const dy = Math.abs(monster.y - state.player.y);\n            if (allAttackSlotsFull && (dx <= 2 || dy <= 2)) {\n                if (!state.waitingMonsters.includes(monster)) {\n                    dispatch({\n                        type: 'UPDATE_WAITING_MONSTERS',\n                        payload: { waitingMonsters: [...state.waitingMonsters, monster] }\n                    });\n                }\n            }\n        }\n    });\n}\n\nfunction endCombat(state, dispatch) {\n    dispatch({\n        type: 'SET_COMBAT',\n        payload: {\n            inCombat: false,\n            attackSlots: [],\n            waitingMonsters: [],\n            turnOrder: [],\n            combatTurn: null,\n            player: { ...state.player, lastComment: \"\" },\n            dialogData: updateCombatDialogs(\"\", [], state.player, [])\n        }\n    });\n    roundNumber = 1;\n}\n\n\nlet roundNumber = 1;\n\n\nfunction combatStep(state, dispatch) {\n    if (!state.inCombat || !state.turnOrder.length) return;\n\n    const current = state.combatTurn;\n    const currentIndex = state.turnOrder.indexOf(current);\n    const activeMonsters = state.attackSlots.map(slot => slot.monster).filter(m => m && m.hp > 0);\n    let allMonsters = state.attackSlots.map(slot => slot.monster);\n\n    console.log('Combat Step - Current:', current?.name, 'Turn Order:', state.turnOrder.map(t => t.name), 'Active Monsters:', activeMonsters.map(m => m.name + ' HP:' + m.hp));\n\n    let playerComment = state.dialogData?.player?.comment || \"\";\n    let enemyComments = allMonsters.map(() => \"\");\n\n    let updatedPlayer = { ...state.player };\n    let updatedAttackSlots = [...state.attackSlots];\n\n    if (current === state.player) {\n        const target = activeMonsters[0];\n        console.log('Player Turn - Target:', target ? `${target.name} HP:${target.hp}` : 'None');\n        if (target) {\n            if (Math.random() < 0.8) {\n                target.hp -= 6;\n                playerComment = \"You hit for 6 points!\";\n                enemyComments[0] = target.hp <= 0 ? \"Monster is dead!\" : \"\";\n            } else {\n                playerComment = \"You miss!\";\n            }\n        } else {\n            playerComment = \"No target available!\";\n        }\n    } else if (activeMonsters.includes(current)) {\n        const monsterIndex = allMonsters.indexOf(current);\n        if (Math.random() < 0.5) {\n            updatedPlayer.hp -= 4;\n            enemyComments[monsterIndex] = \"He hit you for 4 points!\";\n            allMonsters[monsterIndex].lastComment = \"He hit you for 4 points!\";\n        } else {\n            enemyComments[monsterIndex] = \"He missed you!\";\n            allMonsters[monsterIndex].lastComment = \"He missed you!\";\n        }\n    }\n\n    const dialogData = updateCombatDialogs(playerComment, enemyComments, updatedPlayer, allMonsters);\n    console.log('Combat Step - Player Comment Before Update:', playerComment);\n    console.log('Combat Step - Setting Dialog Data:', dialogData);\n\n    const nextTurnIndex = (currentIndex + 1) % state.turnOrder.length;\n    const nextTurn = state.turnOrder[nextTurnIndex];\n\n    if (updatedPlayer.hp <= 0) {\n        endCombat(state, dispatch);\n    } else if (activeMonsters.length === 0 && state.waitingMonsters.length === 0) {\n        endCombat(state, dispatch);\n    } else {\n        if (current === state.turnOrder[state.turnOrder.length - 1]) {\n            resolveRound(state, dispatch); // Updates attackSlots and turnOrder\n            updatedAttackSlots = state.attackSlots.filter(s => s.monster && s.monster.hp > 0);\n            calculateTurnOrder(state, dispatch); // Recalculates turnOrder\n            roundNumber++;\n        }\n\n        dispatch({\n            type: 'SET_COMBAT',\n            payload: {\n                inCombat: true,\n                attackSlots: updatedAttackSlots,\n                turnOrder: state.turnOrder,\n                combatTurn: nextTurn,\n                player: { ...updatedPlayer, lastComment: playerComment },\n                dialogData: dialogData\n            }\n        });\n        console.log('After Dispatch - inCombat:', state.inCombat, 'Next Turn:', nextTurn?.name);\n        moveWaitingMonsters(state, dispatch);\n    }\n}\n\n\nconst Combat = ({ state, dispatch }) => {\n    const [combatActive, setCombatActive] = useState(false);\n\n    useEffect(() => {\n        if (state.inCombat && !combatActive) {\n            console.log('Combat Started - Initial State:', { combatTurn: state.combatTurn?.name, attackSlots: state.attackSlots });\n            setCombatActive(true);\n        }\n    }, [state.inCombat]);\n\n    const handleNextTurn = () => {\n        console.log('Next Turn Clicked');\n        combatStep(state, dispatch);\n    };\n\n    console.log('Combat Component - inCombat:', state.inCombat, 'Dialog Data:', state.dialogData);\n\n    return (\n        <div className=\"combat\">\n            <Dialog data={state.dialogData?.player || { name: state.player.name, hp: state.player.hp, comment: '' }} index=\"player\" />\n            {state.dialogData?.enemies?.map((enemy, i) => enemy && (\n                <Dialog key={i} data={enemy} index={i} />\n            ))}\n            <div style={{ color: 'red', fontSize: '20px' }}>\n                Raw Player Comment: {state.dialogData?.player?.comment || 'No comment yet'}\n            </div>\n            <button onClick={handleNextTurn}>Next Turn</button>\n        </div>\n    );\n};\n\n\n\nexport default Combat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}